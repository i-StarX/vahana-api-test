!function(e,t){for(var r in t)e[r]=t[r]}(window,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=27)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(31);r(32);var o=r(33),i=function(){this.encryption=new Encryption,this.aesEncryption=new n.AESEncryption(this.encryption.cryptoJs),this.rsaEncryption=new o.RSAEncryption(this.encryption.jsEncrypt)};t.Security=i},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(11),s=r(2),u=r(3),c=r(7),l=function(){function e(){this.security=new i.Security,this.dateParsing=new a.DateParsing}return e.prototype.clearCreds=function(){u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.AUTHJWTTOKEN)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.LOGINID))},e.prototype.clearCredsAll=function(){u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.AUTHJWTTOKEN)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.LOGINID)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.REGISTERATIONFAIL)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.PUBLICKEY)),u.Storage.getInstance().clear(this.makeKey(c.StorageConstant.JWTTOKEN)),u.Storage.getInstance().clear(this.makeKey("pmlc"))},e.prototype.makeKey=function(e){return s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()+"-"+s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()+"-"+e},e.prototype.setGuid=function(e){return n(this,void 0,void 0,function(){var t,r;return o(this,function(n){switch(n.label){case 0:return console.log("step 5"),t=(new Date).getTime(),r="xxxxxxxx-xxxx-3xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var r=(t+16*Math.random())%16|0;return t=Math.floor(t/16),("x"===e?r:3&r|8).toString(16)}),[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.GUID),this.security.aesEncryption.getEncryption(r,e))];case 1:return n.sent(),[2]}})})},e.prototype.handleGUID=function(){return n(this,void 0,void 0,function(){var e,t,r,n,i;return o(this,function(o){switch(o.label){case 0:return console.log("step 4"),[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.PUBLICKEY))];case 1:return e=o.sent(),[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.JWTTOKEN))];case 2:return t=o.sent(),e&&t?(i=(n=JSON).parse,[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.GUID))]):[3,4];case 3:return(r=i.apply(n,[o.sent()]))&&""===this.security.aesEncryption.getDecryption(r,s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())?(alert("Error"),this.clearCredsAll(),[2]):[3,5];case 4:this.setGuid(s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey()),o.label=5;case 5:return[2]}})})},e.prototype.isRegistered=function(){return n(this,void 0,void 0,function(){var e,t;return o(this,function(r){switch(r.label){case 0:return u.Storage.getInstance().clear(this.makeKey("regisFail")),[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.PUBLICKEY))];case 1:return e=r.sent(),[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.JWTTOKEN))];case 2:return t=r.sent(),[2,null!==e&&null!==t]}})})},e.prototype.checkPropCall=function(){return n(this,void 0,void 0,function(){var e,t;return o(this,function(r){switch(r.label){case 0:return[4,u.Storage.getInstance().getItemValue(this.makeKey("pmlc"))];case 1:return e=r.sent(),t=this.dateParsing.dateFormat("propMas",new Date),[2,e===t]}})})},e.prototype.userCredentials=function(e,t,r){return n(this,void 0,void 0,function(){return o(this,function(n){switch(n.label){case 0:return[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.LOGINID),e)];case 1:return n.sent(),[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.AUTHJWTTOKEN),this.security.aesEncryption.getEncryption(t,r))];case 2:return n.sent(),[2]}})})},e.prototype.setPmlcValue=function(){u.Storage.getInstance().setItem(this.makeKey("pmlc"),this.dateParsing.dateFormat("propMas",new Date))},e.prototype.fingerprint=function(){return n(this,void 0,void 0,function(){var e,t,r;return o(this,function(n){switch(n.label){case 0:return r=(t=JSON).parse,[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.GUID))];case 1:return e=r.apply(t,[n.sent()]),[2,this.security.aesEncryption.getDecryption(e,s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())]}})})},e.prototype.getRequestid=function(e,t,r,n){return n.appId+t+e+this.dateParsing.dateFormat("requestid",r)},e.prototype.getClientid=function(e){return e.orgId+"~"+e.appId},e.prototype.generateTxnKey=function(e,t){return n(this,void 0,void 0,function(){var r,n,i,a,s,l;return o(this,function(o){switch(o.label){case 0:return r=this.randomString(32-this.dateParsing.dateFormat("txnDate",e).length),r=this.dateParsing.dateFormat("txnDate",e)+r,a=(i=JSON).parse,[4,u.Storage.getInstance().getItemValue(this.makeKey(c.StorageConstant.PUBLICKEY))];case 1:return n=a.apply(i,[o.sent()]),s=this.security.aesEncryption.getDecryption(n,t.secureKey),l=this.security.rsaEncryption.getRsaEncrypt(r,s),l=this.base64ToHex(l),[2,{t:r,b:l}]}})})},e.prototype.randomString=function(e){for(var t="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",r="",n=e;n>0;--n)r+=t[Math.round(Math.random()*(t.length-1))];return r},e.prototype.base64ToHex=function(e){try{for(var t=void 0,r=atob(e.replace(/[ \r\n]+$/,"")),n=[],o=0;o<r.length;++o){var i=r.charCodeAt(o).toString(16);1===i.length&&(i="0"+i),n[n.length]=i,t=JSON.parse(JSON.stringify(n))}return t.join("")}catch(e){return}},e.prototype.authCredentials=function(e,t,r){return n(this,void 0,void 0,function(){var n,i;return o(this,function(o){switch(o.label){case 0:for(i in n={},e)"public-pem"===i&&(n.key=this.security.aesEncryption.encryptText(e[i].toString(),t));return[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.PUBLICKEY),n.key)];case 1:return o.sent(),[4,u.Storage.getInstance().setItem(this.makeKey(c.StorageConstant.JWTTOKEN),r)];case 2:return o.sent(),[2]}})})},e}();t.RequestUtility=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(34),o=function(){function e(){}return e.getInstance=function(){return e.instance||(e.instance=new e),e.instance},e.prototype.setEnvironment=function(e){e.hasOwnProperty("environment")&&(e=e.environment),this.environment=new n.Environment(e)},e.prototype.getEnvironment=function(){return this.environment},e}();t.EnvironmentStore=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(4),o=r(14),i=r(0),a=function(){function e(){this.security=new i.Security}return e.getInstance=function(){return e.instance||(e.instance=new e),e.instance},e.prototype.setItem=function(e,t){var r=this;return new Promise(function(i){try{t=r.getEncryptedValue(t,r.encryptedKey||e);var a=r.storageApi.setItem(r.getKeyName(e),JSON.stringify(t));a instanceof Promise?a.then(function(e){i(!0)}):i(!0)}catch(e){throw n.Logger.getInstance().error("Unable to set Item"),new o.CustomError("PW001",e)}})},e.prototype.getItem=function(e){return this.storageApi.getItem(this.getKeyName(e))},e.prototype.clear=function(e){sessionStorage.removeItem(this.getKeyName(e))},e.prototype.getItemValue=function(e){var t=this;return new Promise(function(r,i){try{var a=t.getItem(e);a instanceof Promise?a.then(function(n){r(t.getDecryptedValue(n,t.encryptedKey||e))}):r(t.getDecryptedValue(a,t.encryptedKey||e))}catch(e){throw n.Logger.getInstance().error("key does not exist in storage"),new o.CustomError("PW001",e)}})},e.prototype.setConfiguration=function(e,t,r,n){this.storageApi=sessionStorage,this.driverType=e,this.isEncryption=t,this.encryptedKey=r},e.prototype.getEncryptedValue=function(e,t){return this.isEncryption?this.security.aesEncryption.getEncryption(JSON.stringify(e),t):e},e.prototype.getDecryptedValue=function(e,t){return e&&this.isEncryption?this.security.aesEncryption.getDecryption(JSON.parse(e),t):e},e.prototype.getKeyName=function(e){return this.isEncryption?btoa(e):e},e}();t.Storage=a},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(30),a=function(e){function t(){return e.call(this)||this}return o(t,e),t.getInstance=function(){return t.instance||(t.instance=new i.CustomConsole),t.instance},t}(i.CustomConsole);t.Logger=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.mapAPIResponse=function(t,r,n){return t?e.getSuccessResponse(t,r):e.getErrorResponse(t,r,n)},e.getSuccessResponse=function(e,t){return{status:e,data:t}},e.getErrorResponse=function(e,t,r){return{status:e,servercode:t.status,errorCode:r,errorMessage:t.message,completeError:t}},e}();t.UserResponse=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.NETWORK="NETWORK",e.BODYPARAM="bodyParam",e.CALLBACKINVALID="CALLBACKINVALID",e.HEADERPARAM="headerParam",e.GUID="guid",e.REQUESTINVALID="requestInvalid",e.SERVICEINVALID="serviceInvalid",e.DECRYPTION="decryption",e.PARSINGRESPONSE="parsingResponse",e.SERVERCONNECTING="serverConnecting",e.REGISTRATIONFAILED="registrationFailed",e.DUPLICATESESSION="loggedIn",e.UNKNOWN="unknown",e}();t.ErrorConstant=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.JWTTOKEN="jwtToken",e.LOGINID="loginId",e.PUBLICKEY="Publickey",e.AUTHJWTTOKEN="authJwtToken",e.GUID="GUID",e.REGISTERATIONFAIL="regisFail",e}();t.StorageConstant=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(41),o=r(43),i=r(44),a=r(47),s=function(){this.networkValidators=new i.NetworkValidation,this.argumentsValidators=new n.ArgumentsValidation,this.requestValidation=new a.PrepareDataValidation,this.httpParameterValidator=new o.HttpParameterValidation};t.Validators=s},function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(6),a=r(42),s=r(14),u=function(e){function t(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.apply(this,t)||this}return o(t,e),t.getErrors=function(e){var t={},r={};switch(e){case i.ErrorConstant.NETWORK:t.status=!1,t.message=a.ErrorMessage.NETWORKOFFLINE,r=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.BODYPARAM:t.status=!1,t.message=a.ErrorMessage.BODYNOTVALID,r=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.HEADERPARAM:t.status=!1,t.message=a.ErrorMessage.HEADERNOTVALID,r=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.GUID:t.status=!1,t.message=a.ErrorMessage.GUUIDERROR,r=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.REQUESTINVALID:t.status=!1,t.message=a.ErrorMessage.REQUESTNOTVALID,r=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.SERVICEINVALID:t.status=!1,t.message=a.ErrorMessage.MAXSERVICE,r=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.DECRYPTION:t.status=!1,t.message=a.ErrorMessage.DECRYPTION,r=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.PARSINGRESPONSE:t.status=!1,t.message=a.ErrorMessage.PARSINGRESPONSE,r=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.SERVERCONNECTING:t.status=!1,t.message=a.ErrorMessage.SERVERCONNECTION,r=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.REGISTRATIONFAILED:t.status=!1,t.message=a.ErrorMessage.REGISTRATION,r=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.DUPLICATESESSION:t.status=!1,t.message=a.ErrorMessage.DUPLICATESESSION,r=new s.CustomError("PW-0001",t);break;case i.ErrorConstant.CALLBACKINVALID:t.status=!1,t.message=a.ErrorMessage.CALLBACKINVALID,r=new s.CustomError("PW-0001",t);break;default:t.status=!1,t.message=a.ErrorMessage.DEFAULTMESSAGE,r=new s.CustomError("PW-0001",t)}return r},t}(Error);t.ErrorHandler=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){this.pwRequest={PWHeader:{clientid:"",deviceid:null,platform:"WEB",authorization:"",requesttype:"",txnkey:"",requestid:"",servicename:"",hash:"",nounce:""},PWBody:{interfaces:{APPLICATION_VERSION:"",DEVICE_TIMESTAMP:"",PW_CLIENT_VERSION:"",fingerprint:"",DEVICE_MAKE:"",DEVICE_MODEL:"",PW_VERSION:"",DEVICE_LATITUDE:"",DEVICE_LONGITUDE:""},services:{}}}};t.PlatwareRequestModel=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.dateFormat=function(e,t){"object"==typeof t||(t=new Date);var r="",n="",o="",i="",a="",s="",u="";return"txnDate"===e?(r=t.getUTCDate()+"",n=t.getUTCMonth()+1+"",o=t.getUTCFullYear()+"",i=t.getUTCHours()+"",a=t.getUTCMinutes()+"",s=t.getUTCSeconds()+"",u=t.getUTCMilliseconds()+""):(r=t.getDate()+"",n=t.getMonth()+1+"",o=t.getFullYear()+"",i=t.getHours()+"",a=t.getMinutes()+"",s=t.getSeconds()+"",u=t.getMilliseconds()+""),r=this.checkZero(r),n=this.checkZero(n),o=this.checkZero(o),i=this.checkZero(i),a=this.checkZero(a),s=this.checkZero(s),"device"===e?r+"-"+n+"-"+o+" "+i+":"+a+":"+s:"requestid"===e?r+n+o+i+a+s+u:"txnDate"===e?o.toString().substr(-2)+n+r+i+a+s+this.addZero(u.toString()):"propMas"===e?r+"-"+n+"-"+o:r+n+o+i+a+s+u},e.prototype.addZero=function(e){return 2==e.length?e="0"+e:1==e.length&&(e="00"+e),e},e.prototype.checkZero=function(e){return 1==e.length&&(e="0"+e),e},e}();t.DateParsing=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(22),o=r(40),i=r(23),a=function(){function e(e,t){this.setDefaultProps=new i.SetPWRequest,this.setDefaultProps.setPWRequest(),this.hexString=new o.HexUtility,this.apiType=new n.ApiType,this.fingerPrint=t,this.windowNavigator=window.navigator,e.reqData.services&&(this.serviceName=Object.keys(e.reqData.services).join("~").toString()),this.currentDate=new Date,this.currentNounce=this.currentDate.getTime(),this.nounce=this.hexString.getHexString(this.currentDate.getTime().toString()),this.envProp=e.envProps.envProps}return Object.defineProperty(e.prototype,"getFingerPrint",{get:function(){return this.fingerPrint},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getWindowNavigator",{get:function(){return this.windowNavigator},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getServiceName",{get:function(){return this.serviceName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getCurrentDate",{get:function(){return this.currentDate},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getCurrentNounce",{get:function(){return this.currentNounce},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getNounce",{get:function(){return this.nounce},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getEnvProp",{get:function(){return this.envProp},enumerable:!0,configurable:!0}),e}();t.RequestProprty=a},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(24),a=r(53),s=r(25),u=r(54),c=r(2),l=r(1),d=r(18),p=r(21),h=r(8),g=r(4),f=r(26),y=function(){function e(){this.requestController=new p.RequestController,this.networkController=new d.NetworkController,this.requestUtility=new l.RequestUtility,this.handler=new i.Handlers,this.validator=new h.Validators}return e.prototype.runLifeCycle=function(){},e.prototype.doRegister=function(e){return n(this,void 0,void 0,function(){var t,r,n,i;return o(this,function(o){switch(o.label){case 0:console.log("step 7"),o.label=1;case 1:return o.trys.push([1,14,,15]),g.Logger.getInstance().log("=================Inside doRegister Method ========="),t=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+"/register",[4,this.requestUtility.isRegistered()];case 2:return o.sent()?[3,12]:(console.log("step 8"),g.Logger.getInstance().log("==Registration is not Done===, Initiate the Registration Process"),[4,this.requestController.getRegistrationRequest(e)]);case 3:return r=o.sent(),g.Logger.getInstance().log("==Registration request preparation Done",r),[4,this.callNetworkController({url:t,body:r.PWBody,header:r.PWHeader})];case 4:return(n=o.sent()).status?[4,(new u.RegistrationResponseHandler).readResponse(n.body,n.headers)]:[3,7];case 5:return o.sent(),[4,this.requestUtility.isRegistered()];case 6:return[2,o.sent()];case 7:return o.trys.push([7,10,,11]),[4,this.handler.httpRespnseponseHandled(n.body,r.PWHeader)];case 8:return i=o.sent(),[4,(new u.RegistrationResponseHandler).registrationErrorHandle(i,n.body,e)];case 9:return o.sent(),[3,11];case 10:throw o.sent();case 11:return[3,13];case 12:return[2,Promise.resolve(!0)];case 13:return[3,15];case 14:throw o.sent();case 15:return[2]}})})},e.prototype.doAuth=function(e){return n(this,void 0,void 0,function(){var t,r,n,i,s;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,9,,10]),t=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+"/register",g.Logger.getInstance().log("If registration is not done yet ==> Prepare request For registeration and do it"),[4,this.doRegister(e)];case 1:return o.sent()?[4,this.requestController.getAuthRequest(e)]:[3,8];case 2:return r=o.sent(),[4,this.callNetworkController({url:t,body:r.temp,header:r.PWHeader})];case 3:return(n=o.sent()).status?(g.Logger.getInstance().log("If response is True ==> Save The Credentials"),[4,(new a.AuthResponseHandler).readResponse(n.body,n.headers,r.loginId,n,r.txnkey)]):[3,5];case 4:return[2,o.sent()];case 5:return o.trys.push([5,7,,8]),g.Logger.getInstance().log("If response is False ==> Handle the error"),i=this.handler.httpRespnseponseHandled(n.body,r.PWHeader),[4,(new a.AuthResponseHandler).authErrorHandle(i,n.body,e,!1)];case 6:if((s=o.sent()).status)return[2,s];throw s;case 7:throw o.sent();case 8:return[3,10];case 9:throw o.sent();case 10:return[2]}})})},e.prototype.doAuthDirect=function(e){return n(this,void 0,void 0,function(){var t,r,n,i,s;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,9,,10]),t=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+"/authenticate",[4,this.doRegister(e)];case 1:return o.sent()?[4,this.requestController.getAuthRequest(e)]:[3,8];case 2:return r=o.sent(),[4,this.callNetworkController({url:t,body:r.temp,header:r.PWHeader})];case 3:return(n=o.sent()).status?(g.Logger.getInstance().log("If response is True ==> Save The Credentials"),[4,(new a.AuthResponseHandler).readResponse(n.body,n.headers,r.loginId,n,r.txnkey)]):[3,5];case 4:return[2,o.sent()];case 5:return o.trys.push([5,7,,8]),g.Logger.getInstance().log("If response is False ==> Handle the error"),i=this.handler.httpRespnseponseHandled(n.body,r.PWHeader),[4,(new a.AuthResponseHandler).authErrorHandle(i,n.body,e,!0)];case 6:if((s=o.sent()).status)return[2,s];throw s;case 7:throw o.sent();case 8:return[3,10];case 9:throw o.sent();case 10:return[2]}})})},e.prototype.doGateway=function(e,t,r,i){return n(this,void 0,void 0,function(){var n,a,u,l,d;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,11,,12]),n=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+e.url,g.Logger.getInstance().log("====Checking if Registartion is Done or not==="),[4,this.doRegister(e)];case 1:return o.sent()?[4,this.requestController.getGatewayRequest(e)]:[3,10];case 2:return a=o.sent(),[4,this.callNetworkController({url:n,body:a.temp,header:a.PWHeader},r,i,"byService",a,{body:e,header:t})];case 3:return(u=o.sent()).isWorker?(g.Logger.getInstance().log("API running on worker: No need to wait here for response"),[2,Promise.resolve(u)]):[3,4];case 4:return u.status?(g.Logger.getInstance().log("If response is True ==> Save The Credentials"),a.txnkey=!1===navigator.onLine?this.transactionKey:a.txnkey,[4,(new s.GatewayResponseHandler).readResponse(u.body,u.headers,a.loginId,u,a.txnkey)]):[3,6];case 5:return[2,o.sent()];case 6:return o.trys.push([6,9,,10]),g.Logger.getInstance().log("If response is False ==> Handle the error"),[4,this.handler.httpRespnseponseHandled(u.body,a.PWHeader)];case 7:return l=o.sent(),[4,(new s.GatewayResponseHandler).gatewayErrorHandle(l,u.body,e,t)];case 8:if((d=o.sent()).status)return[2,d];throw d;case 9:throw o.sent();case 10:return[3,12];case 11:throw o.sent();case 12:return[2]}})})},e.prototype.callNetworkController=function(e,t,r,n,o,i){return console.log("step 10"),g.Logger.getInstance().log("==calling Network Layer with request",e),this.networkController.doCall(e,t,r,n,o,i)},e.prototype.doCall=function(e,t,r,i,a){return n(this,void 0,void 0,function(){var n;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,10,,11]),g.Logger.getInstance().log("Check Type Of Call ==> Authentication or Gateway"),!navigator.geolocation||a?[3,2]:[4,this.validator.networkValidators.getPosition()];case 1:return n=o.sent(),e.envProps.envProps.lat=n.latitude,e.envProps.envProps.lon=n.longitude,[3,3];case 2:e.envProps.envProps.lat="",e.envProps.envProps.lon="",o.label=3;case 3:return g.Logger.getInstance().log("checking System is online or not"),this.validator.networkValidators.isNetworkAvailable()?"AUTH_VAHANA"!==Object.keys(e.reqData.services)[0]&&"AUTH"!==Object.keys(e.reqData.services)[0]&&"VAHANA_AUTHENTICATION"!==Object.keys(e.reqData.services)[0]?[3,5]:(g.Logger.getInstance().log("========== Calling Auth Service ============="),[4,this.doAuth(e)]):[3,9];case 4:return[2,o.sent()];case 5:return"REGISTERAPP"!==Object.keys(e.reqData.services)[0]?[3,7]:[4,this.doRegister(e)];case 6:return[2,o.sent()];case 7:return g.Logger.getInstance().log("=====================Calling Gateway ======================"),[4,this.doGateway(e,t,r,i)];case 8:return[2,o.sent()];case 9:return[3,11];case 10:throw o.sent();case 11:return[2]}})})},e.prototype.doEndPointCall=function(e,t,r){return n(this,void 0,void 0,function(){var n,i,a,s,u,l;return o(this,function(o){switch(o.label){case 0:console.log("step 6"),o.label=1;case 1:return o.trys.push([1,14,,15]),"/dynamic-router",n=c.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getBaseUrl()+"/dynamic-router"+e.url,navigator.geolocation?[4,this.validator.networkValidators.getPosition()]:[3,3];case 2:i=o.sent(),e.envProps.envProps.lat=i.latitude,e.envProps.envProps.lon=i.longitude,o.label=3;case 3:return[4,this.doRegister(e)];case 4:return o.sent()?[4,this.requestController.getEndPointRequest(e)]:[3,13];case 5:return a=o.sent(),[4,this.callNetworkController({url:n,body:a.temp,header:a.PWHeader},t,r,"byUrl",a,e)];case 6:return s=o.sent(),console.log(s),s.isWorker?(g.Logger.getInstance().log("API running on worker: No need to wait here for response"),[2,Promise.resolve(s)]):[3,7];case 7:return s.status?(e.txnkey=!1===navigator.onLine?this.transactionKey:e.txnkey,[4,(new f.EndPointResponseHandler).readResponse(s.body,s.headers,a.txnkey)]):[3,9];case 8:return[2,o.sent()];case 9:return o.trys.push([9,12,,13]),g.Logger.getInstance().log("If response is False ==> Handle the error"),[4,this.handler.httpRespnseponseHandled(s.body,e.PWHeader)];case 10:return u=o.sent(),[4,(new f.EndPointResponseHandler).dynamicRouterErrorHandle(u,s.body,e)];case 11:if((l=o.sent()).status)return[2,l];throw l;case 12:throw o.sent();case 13:return[3,15];case 14:throw o.sent();case 15:return[2]}})})},e}();t.ServiceController=y},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t){this.code=e,this.response=t};t.CustomError=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(4),o=r(3),i=r(16),a=function(){function e(){this.worker=!1}return e.getInstance=function(){return e.instance||(e.instance=new e),e.instance},e.prototype.setConfiguration=function(e){this.configuration=e,this.doAppConfiguration()},e.prototype.getConfiguration=function(){return this.configuration},e.prototype.doAppConfiguration=function(){var e=this.getConfiguration();n.Logger.getInstance().setLogger(e.logging),o.Storage.getInstance().setConfiguration(e.storage,e.enableStorageEncryption||!1,e.storageEncryptionKey),i.DocumentManager.basePoint=e.DMSPoint?e.DMSPoint:i.DocumentManager.basePoint},e}();t.AppConfigStore=a},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(5),a=r(4),s=r(2),u=r(17),c=r(55),l=function(){function e(){this.constantUrl=c.controllerConst}return e.getInstance=function(){return!e.basePoint||e.basePoint,this.instance},e.prototype.updateDocumentMetadata=function(e,t,r){return this.updateMetaData(e,t,r,this.constantUrl.DMS.uploadMetaData,this.constantUrl.DMS.DOCUMENT)},e.prototype.updateFileMetadata=function(e,t,r){return this.updateMetaData(e,t,r,this.constantUrl.DMS.uploadMetaData,this.constantUrl.DMS.FILE)},e.prototype.getViewerDataById=function(t,r,c){var l=this,d=e.basePoint+this.constantUrl.DMS.fetchByFileId;return new Promise(function(e,p){return n(l,void 0,void 0,function(){var n,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========VIEWER DATA BY ID Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof d&&r instanceof Object&&c instanceof Object&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),c.refId=r.refId,n={},d=d+"/"+r.storageId+"/"+r.fileId,a.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(n,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.updateFileMetaData=function(t,r,c){var l=this,d=e.basePoint+this.constantUrl.DMS.updateFileMetaData;return new Promise(function(e,p){return n(l,void 0,void 0,function(){var n,l,h,g;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========LISTING DATA Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof d&&r instanceof Object&&c instanceof Object&&r.storageId&&r.refId&&r.files instanceof Array&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),c.refId=r.refId,n=[],l={},r.files.forEach(function(e){l.id=e.id,l.metadata=e.customMetadata,n.push(l)}),d=d+"/"+r.storageId,a.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(n,c,d)]):[3,2];case 1:return h=o.sent(),e(h),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return g=o.sent(),p(g),[3,5];case 5:return[2]}})})})},e.prototype.downloadFileUrl=function(t,r,c){var l=this,d=e.basePoint+this.constantUrl.DMS.downloadUrl;return new Promise(function(e,p){return n(l,void 0,void 0,function(){var n,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========DOWNLOAD URL Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof d&&r instanceof Object&&c instanceof Object&&r.fileId instanceof Array&&r.storageId&&r.fileType&&r.refId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),c.refId=r.refId,n={fileIds:r.fileId,type:r.fileType},d=d+"/"+r.storageId,a.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(n,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.deleteByFileId=function(t,r,c){var l=this,d=e.basePoint+this.constantUrl.DMS.deleteFileId;return new Promise(function(e,p){return n(l,void 0,void 0,function(){var n,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========DELETE DATA Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof d&&r instanceof Object&&c instanceof Object&&r.fileId instanceof Array&&r.storageId&&r.refId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),c.refId=r.refId,n={fileIds:r.fileId},d=d+"/"+r.storageId,a.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(n,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.getAllDocData=function(t,r,c){var l=this,d=e.basePoint+this.constantUrl.DMS.docAndFile;return new Promise(function(e,p){return n(l,void 0,void 0,function(){var n,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========DOC AND FILE DATA Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof d&&r instanceof Object&&c instanceof Object&&r.refId&&r.storageId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),c.refId=r.refId,n={},d=d+"/"+r.storageId,a.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(n,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.getListData=function(t,r,c){var l=this,d=e.basePoint+this.constantUrl.DMS.listingData;return new Promise(function(e,p){return n(l,void 0,void 0,function(){var n,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========LISTING DATA Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),"string"==typeof d&&r instanceof Object&&c instanceof Object&&r.folderPath&&r.refId&&r.storageId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),n={refId:r.refId,path:r.folderPath},d=d+"/"+r.storageId,a.Logger.getInstance().log("setting up request parameters"),[4,(new u.AppController).runForEndPoint(n,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.uploadDocument=function(t,r,c){var l=this,d=this.constantUrl.DMS.uploadStartPoint;return d=d+e.basePoint+(r.documentId?this.constantUrl.DMS.updateDocument:this.constantUrl.DMS.upload),new Promise(function(e,p){return n(l,void 0,void 0,function(){var n,l,h,g;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========UPLOAD DOCUMENT Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),"string"==typeof d&&r instanceof Object&&c instanceof Object&&r.documentName&&r.files&&r.folderPath&&r.refId&&r.storageId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(d=d+"/"+r.storageId,a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),n=new FormData,l={files:[],refId:r.refId,folderPath:r.folderPath},a.Logger.getInstance().log("setting up request parameters"),l.documentId=r.documentId?r.documentId:null,l.documentName=r.documentName,l.customMetadata=r.customMetaData,a.Logger.getInstance().log("Adding files in request parameters for form data"),l.files=this.filesFormData(r.files,n),n.append("uploadRequest",JSON.stringify(l)),[4,(new u.AppController).runForEndPoint(n,c,d)]):[3,2];case 1:return h=o.sent(),e(h),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return g=o.sent(),p(g),[3,5];case 5:return[2]}})})})},e.prototype.uploadFile=function(t,r,c){var l=this,d=this.constantUrl.DMS.uploadStartPoint+e.basePoint+this.constantUrl.DMS.upload;return new Promise(function(e,p){return n(l,void 0,void 0,function(){var n,l,h,g,f,y;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========UPLOAD FILE Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),"string"==typeof d&&r instanceof Object&&c instanceof Object&&r.files&&r.folderPath&&r.refId&&r.storageId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),n=new FormData,l={files:[],refId:r.refId,folderPath:r.folderPath},d=d+"/"+r.storageId,a.Logger.getInstance().log("setting up request parameters"),h=this.filesFormData(r.files,n),(y=l.files).push.apply(y,h),n.append("uploadRequest",JSON.stringify(l)),a.Logger.getInstance().log(n.getAll("files")),a.Logger.getInstance().log(n.getAll("uploadRequest")),[4,(new u.AppController).runForEndPoint(n,c,d)]):[3,2];case 1:return g=o.sent(),e(g),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return f=o.sent(),p(f),[3,5];case 5:return[2]}})})})},e.prototype.deleteFile=function(t,r,c){var l=this,d=e.basePoint+this.constantUrl.DMS.deleteFile;return new Promise(function(e,p){return n(l,void 0,void 0,function(){var n,l;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========DO DELETE FILE/DOCUMENT Method  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),""!==d&&"string"==typeof d&&r instanceof Object&&c instanceof Object&&r.storageId&&r.id&&r.refId&&r.type&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),d=d+"/"+r.storageId+"/"+r.refId+"/"+r.type+"/"+r.id+"/"+(!!r.deleteWithHistory&&r.deleteWithHistory),[4,(new u.AppController).runForEndPoint({},c,d)]):[3,2];case 1:return n=o.sent(),e(n),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return l=o.sent(),p(l),[3,5];case 5:return[2]}})})})},e.prototype.updateMetaData=function(t,r,c,l,d){var p=this;return new Promise(function(h,g){return n(p,void 0,void 0,function(){var n,p,f;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("=========UPDATE DOCUMENT Metadata  =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),""!==l&&"string"==typeof l&&r instanceof Object&&c instanceof Object&&r.customMetaData&&r.id&&r.refId&&r.storageId&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),c.refId=r.refId,l=e.basePoint+"/"+l+"/"+r.storageId,n={refId:r.refId,type:d,id:r.id,metadata:r.customMetaData},[4,(new u.AppController).runForEndPoint(n,c,l)]):[3,2];case 1:return p=o.sent(),h(p),[3,3];case 2:h(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return f=o.sent(),g(f),[3,5];case 5:return[2]}})})})},e.prototype.getFilesForFolder=function(t,r,c){var l=this,d=e.basePoint+this.constantUrl.DMS.fetchForFolder;return new Promise(function(e,p){return n(l,void 0,void 0,function(){var n,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("========= getFilesByPath =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),""!==d&&"string"==typeof d&&r instanceof Object&&c instanceof Object&&r.refId&&r.storageId&&r.path&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),d=d+"/"+r.storageId,n={refId:r.refId,path:r.path},[4,(new u.AppController).runForEndPoint(n,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.getFilesForDocument=function(t,r,c){var l=this,d=e.basePoint+this.constantUrl.DMS.fetchForDocument;return new Promise(function(e,p){return n(l,void 0,void 0,function(){var n,l,h;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("========= getFilesForDocument =========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),""!==d&&"string"==typeof d&&r instanceof Object&&c instanceof Object&&r.refId&&r.storageId&&r.path&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),d=d+"/"+r.storageId,n={refId:r.refId,path:r.path,documentName:r.documentName},[4,(new u.AppController).runForEndPoint(n,c,d)]):[3,2];case 1:return l=o.sent(),e(l),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return h=o.sent(),p(h),[3,5];case 5:return[2]}})})})},e.prototype.filesFormData=function(e,t){var r=[];try{return e.forEach(function(e){t.append("files",e);var n=Object.keys(e),o={customMetadata:{}};for(var i in o.name=e.name,o.type=e.type,n)o[n[i]]=e[n[i]];r.push(o)}),r}catch(e){a.Logger.getInstance().log(e)}},e.prototype.storageId=function(t,r,c){var l=this,d=e.basePoint+"/dmsconfig/admin/get/dmsClientDetails";return new Promise(function(e,p){return n(l,void 0,void 0,function(){var n,l;return o(this,function(o){switch(o.label){case 0:return o.trys.push([0,4,,5]),a.Logger.getInstance().log("========Do STORAGE METHOD=========="),a.Logger.getInstance().log("Setting up environment variables"),void 0!==t&&(s.EnvironmentStore.getInstance().setEnvironment(t),a.Logger.getInstance().log(s.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("validating arguments are correct or not"),""!==d&&"string"==typeof d&&c instanceof Object&&r instanceof Object&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId()&&s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId()?(a.Logger.getInstance().log("setting up request headers"),c.orgId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getOrgId(),c.appId=s.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getAppId(),[4,(new u.AppController).runForEndPoint({},c,d)]):[3,2];case 1:return n=o.sent(),a.Logger.getInstance().log(c),a.Logger.getInstance().log(d),a.Logger.getInstance().log(n),e(n),[3,3];case 2:e(i.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),o.label=3;case 3:return[3,5];case 4:return l=o.sent(),p(l),[3,5];case 5:return[2]}})})})},e.instance=new e,e}();t.DocumentManager=l},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(18),a=r(21),s=r(13),u=r(4),c=function(){function e(){this.requestController=new a.RequestController,this.networkController=new i.NetworkController,this.serviceController=new s.ServiceController}return e.prototype.run=function(e,t,r,i,a){return n(this,void 0,void 0,function(){var n;return o(this,function(o){switch(o.label){case 0:u.Logger.getInstance().log("Inside AppController class run()"),u.Logger.getInstance().log("Map the body and header to Platware Request, invoking => mapToPlatwareRequest(body, header)"),o.label=1;case 1:return o.trys.push([1,3,,4]),u.Logger.getInstance().log("Request Mapped to Platware Request"),u.Logger.getInstance().log("Invloking service controller class method DoCall()"),n=this.requestController.mapToPlatwareRequest(e,t),[4,this.serviceController.doCall(n,t,r,i,a)];case 2:return[2,o.sent()];case 3:throw o.sent();case 4:return[2]}})})},e.prototype.runAuth=function(e,t){return n(this,void 0,void 0,function(){var r;return o(this,function(n){switch(n.label){case 0:u.Logger.getInstance().log("Inside AppController class run()"),u.Logger.getInstance().log("Map the body and header to Platware Request, invoking => mapToPlatwareRequest(body, header)"),n.label=1;case 1:return n.trys.push([1,3,,4]),u.Logger.getInstance().log("Request Mapped to Platware Request"),u.Logger.getInstance().log("Invloking service controller class method DoCall()"),r=this.requestController.mapToPlatwareRequest(e,t),[4,this.serviceController.doAuth(r)];case 2:return[2,n.sent()];case 3:throw n.sent();case 4:return[2]}})})},e.prototype.runAuthenticationdirect=function(e,t){return n(this,void 0,void 0,function(){var r;return o(this,function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),r=this.requestController.mapToPlatwareRequest(e,t),[4,this.serviceController.doAuthDirect(r)];case 1:return[2,n.sent()];case 2:throw n.sent();case 3:return[2]}})})},e.prototype.runForEndPoint=function(e,t,r,i,a){return n(this,void 0,void 0,function(){var n;return o(this,function(o){switch(o.label){case 0:u.Logger.getInstance().log("Inside AppController class run()"),u.Logger.getInstance().log("Map the body and header to Platware Request, invoking => mapToPlatwareRequest(body, header)"),o.label=1;case 1:return o.trys.push([1,3,,4]),console.log("step 2"),n=this.requestController.mapToPlatwareRequestUrl(e,t,r),[4,this.serviceController.doEndPointCall(n,i,a)];case 2:return[2,o.sent()];case 3:throw o.sent();case 4:return[2]}})})},e}();t.AppController=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(19),o=r(15),i=r(36),a=r(37),s=r(4),u=r(20),c=function(){function e(){}return e.prototype.doCall=function(e,t,r,n,o,i){return console.log("step 12"),this.setNetwotkAPI(),this.doNetworkCall(e,t,r,n,o,i)},e.prototype.setNetwotkAPI=function(){console.log("step 13");var e=o.AppConfigStore.getInstance().getConfiguration().networkDriver;switch(s.Logger.getInstance().log("setting network Driver",e),console.log(e),e){case"FETCH":this.networkApi=new n.FetchWrapper,s.Logger.getInstance().log("Using Fetch Driver");break;case"AXIOS":this.networkApi=new i.AxiosWrapper,s.Logger.getInstance().log("Using AXIOS Driver");break;case"XMLHTTP":this.networkApi=new a.XmlHttpWrapper,s.Logger.getInstance().log("Using XMLHTTP Driver");break;default:this.networkApi=new n.FetchWrapper,s.Logger.getInstance().log("Network API doesn't match to passed configuartion")}},e.prototype.doNetworkCall=function(e,t,r,n,o,i){return console.log("step 14"),s.Logger.getInstance().log("Calling Post method of Network API",e),t?(u.WebWorkerWrapper.getInstance().postMessage({request:e,apiType:n,platwareRequest:o,uiRequest:i,uid:r}),new Promise(function(e,t){e({isWorker:!0,status:!0})})):this.networkApi.doPostCall(e)},e}();t.NetworkController=c},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(4),a=r(5),s=function(){function e(){}return e.prototype.doPostCall=function(e){var t=this;console.log("step 15");var r=this.getResponseHeaders(e.header,e.body);return i.Logger.getInstance().log("Calling Server==>",r,e.header),fetch(e.url,{method:"POST",body:this.getNetworkBody(e.body),headers:r,credentials:"same-origin"}).then(function(e){return n(t,void 0,void 0,function(){var t;return o(this,function(r){switch(r.label){case 0:return console.log(e),i.Logger.getInstance().log("Response recieved ==>",e),t={},[4,e.json()];case 1:return[2,(t.body=r.sent(),t.headers=e.headers,t.responseCode=e.status,t.status=e.ok,t)]}})})}).catch(function(e){throw console.log("28",e),a.UserResponse.mapAPIResponse(!1,{status:"",message:"Connection Error! We are unable to reach to the server"},"PW003")})},e.prototype.getNetworkBody=function(e){return e instanceof FormData?e:JSON.stringify(e)},e.prototype.getResponseHeaders=function(e,t){return t instanceof FormData?Object.assign({"Content-Security-Policy":"script-src 'self'"},e):Object.assign({"Content-Type":"application/json","Content-Security-Policy":"script-src 'self'"},e)},e}();t.FetchWrapper=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(38),o=function(){function e(){}return e.getInstance=function(){return e.instance||(e.instance=new n),e.instance},e}();t.WebWorkerWrapper=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(39),o=r(48),i=r(49),a=r(50),s=r(1),u=r(9),c=r(6),l=r(23),d=r(51),p=r(52),h=function(){function e(){this.registartionService=new n.RegistrationService,this.gatewayService=new o.GatewayService,this.authService=new i.AuthService,this.prepareRequest=new a.PrepareRequest,this.requestUtility=new s.RequestUtility,this.setPWRequest=new l.SetPWRequest}return e.prototype.initRequest=function(){this.requestUtility.handleGUID()},e.prototype.getRegistrationRequest=function(e){return this.registartionService.getRegistrartionRequest(e)},e.prototype.getGatewayRequest=function(e){return this.gatewayService.getRequestService(e)},e.prototype.getAuthRequest=function(e){return this.authService.getAuthRequest(e)},e.prototype.getEndPointRequest=function(e){return(new p.EndPointService).getRequestService(e)},e.prototype.mapToPlatwareRequest=function(e,t){try{return this.initRequest(),this.prepareRequest.mapToPlatwareRequest(e,t)}catch(e){throw u.ErrorHandler.getErrors(c.ErrorConstant.REQUESTINVALID)}},e.prototype.mapToPlatwareRequestUrl=function(e,t,r){try{return console.log("step 3"),this.initRequest(),(new d.PrepareRequestForEndPoint).mapToPlatwareRequestEndPoint(e,t,r)}catch(e){throw u.ErrorHandler.getErrors(c.ErrorConstant.REQUESTINVALID)}},e}();t.RequestController=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.setapiType=function(e){this.apiType=e},e.prototype.getapiType=function(){return this.apiType},e}();t.ApiType=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(10),o=function(){function e(){this.pwRequest=new n.PlatwareRequestModel}return e.prototype.setPWRequest=function(){this.pwRequest=new n.PlatwareRequestModel},e}();t.SetPWRequest=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(1),o=function(){function e(){this.requestUtility=new n.RequestUtility}return e.prototype.httpRespnseponseHandled=function(e,t){try{if(t)return"625"===e.status&&"LOGOUT"===t.servicename?(this.requestUtility.clearCreds(),t.servicename):"401"===e.status||"627"===e.status||"537"===e.status?t.servicename:"621"===e.status?t.servicename:"402"===e.status||"622"===e.status||"628"===e.status||"528"===e.status?(this.requestUtility.clearCreds(),t.servicename):"Login Failed";if("401"===e.status||"627"===e.status||"537"===e.status)return"";if("402"!==e.status&&"622"!==e.status&&"628"!==e.status&&"528"!==e.status)return"Login Failed";this.requestUtility.clearCreds()}catch(e){throw e}},e}();t.Handlers=o},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(1),s=r(3),u=r(9),c=r(6),l=r(13),d=r(7),p=r(5),h=function(){function e(){this.security=new i.Security,this.requestUtility=new a.RequestUtility,this.serviceController=new l.ServiceController}return e.prototype.readResponse=function(e,t,r,i,a){return n(this,void 0,void 0,function(){var e;return o(this,function(r){"function"==typeof t.get?this.authKey=t.get("Authorization"):this.authKey=t.authKey;try{return e=JSON.parse(this.security.aesEncryption.getDecryption(i.body.response,a)),[2,p.UserResponse.mapAPIResponse(!0,this.getMappedResponse(e))]}catch(e){throw e}return[2]})})},e.prototype.gatewayErrorHandle=function(e,t,r,i){return n(this,void 0,void 0,function(){var n,a,l,h;return o(this,function(o){switch(o.label){case 0:if("Login Failed"===e)throw p.UserResponse.mapAPIResponse(!1,t,"PW-0003");return[4,s.Storage.getInstance().getItemValue(this.requestUtility.makeKey(d.StorageConstant.REGISTERATIONFAIL))];case 1:return null!==o.sent()?[3,2]:(a=!1,[3,4]);case 2:return[4,s.Storage.getInstance().getItemValue(this.requestUtility.makeKey(d.StorageConstant.REGISTERATIONFAIL))];case 3:a=o.sent(),o.label=4;case 4:if(n=a,"LOGOUT"!==e||"625"!==t.status)return[3,5];throw this.requestUtility.clearCredsAll(),p.UserResponse.mapAPIResponse(!0,t,"PW-0002");case 5:return"REGISTERAPP"===e&&"401"===t.status||"627"===t.status||"537"===t.status?n?[3,7]:(this.requestUtility.clearCredsAll(),s.Storage.getInstance().setItem(this.requestUtility.makeKey(d.StorageConstant.REGISTERATIONFAIL),!0),[4,this.serviceController.doGateway(r,i)]):[3,9];case 6:return[2,o.sent()];case 7:throw this.requestUtility.clearCredsAll(),l=u.ErrorHandler.getErrors(c.ErrorConstant.REGISTRATIONFAILED),p.UserResponse.mapAPIResponse(!1,l,l.code);case 8:return[3,14];case 9:return"AUTH_VAHANA"!==e&&"AUTH"!==e&&"VAHANA_AUTHENTICATION"!==e||"621"!==t.status?[3,13]:confirm("You are already logged in. Do you want to kill existing session?")?(!!r.hasOwnProperty("header")?r.header.isforcelogin="Y":(r.header={},r.header.isforcelogin="Y"),[4,this.serviceController.doAuth(r)]):[3,11];case 10:return[2,o.sent()];case 11:throw h=u.ErrorHandler.getErrors(c.ErrorConstant.DUPLICATESESSION),p.UserResponse.mapAPIResponse(!1,h,h.code);case 12:return[3,14];case 13:throw"402"===t.status||"622"===t.status||"628"===t.status||"528"===t.status?(this.requestUtility.clearCreds(),p.UserResponse.mapAPIResponse(!1,t,"PW-0002")):"Login Failed"===e||0!==t.status?p.UserResponse.mapAPIResponse(!1,t,"PW-0003"):p.UserResponse.mapAPIResponse(!1,t,t.status);case 14:return[2]}})})},e.prototype.getMappedResponse=function(e){var t={};for(var r in e.services){if("REGISTERUSER"===r){t.REGISTERUSER=e.services[r].records;break}t[r]=e.services[r].records}return t},e}();t.GatewayResponseHandler=h},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(1),s=r(13),u=r(5),c=r(9),l=r(6),d=function(){function e(){this.security=new i.Security,this.requestUtility=new a.RequestUtility,this.serviceController=new s.ServiceController}return e.prototype.readResponse=function(e,t,r){return n(this,void 0,void 0,function(){var n;return o(this,function(o){"function"==typeof t.get?this.authKey=t.get("Authorization"):this.authKey=t.authKey;try{return n=JSON.parse(this.security.aesEncryption.getDecryption(e.response,r)),[2,u.UserResponse.mapAPIResponse(!0,n)]}catch(e){throw e}return[2]})})},e.prototype.dynamicRouterErrorHandle=function(e,t,r){return n(this,void 0,void 0,function(){var r;return o(this,function(n){if("Login Failed"===e)throw u.UserResponse.mapAPIResponse(!1,t,"PW-0003");if("402"===t.status||"622"===t.status||"628"===t.status||"528"===t.status||"627"===t.status||"537"===t.status)throw this.requestUtility.clearCredsAll(),u.UserResponse.mapAPIResponse(!1,t,"PW-0002");if("Login Failed"===e||0!==t.status)throw u.UserResponse.mapAPIResponse(!1,t,"PW-0003");try{throw u.UserResponse.mapAPIResponse(!1,t,t.status)}catch(e){throw r=c.ErrorHandler.getErrors(l.ErrorConstant.UNKNOWN),u.UserResponse.mapAPIResponse(!1,r,r.code)}return[2]})})},e}();t.EndPointResponseHandler=d},function(e,t,r){(function(t){e.exports=t.Library=r(29)}).call(this,r(28))},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},i=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(4),s=r(15),u=r(2),c=r(8),l=r(17),d=r(16),p=r(56),h=r(5),g=r(3),f=r(0),y=r(20),v=r(25),m=r(24),w=r(26),E=r(19),I=function(){function e(){this.workerHandlers=[],this.addWorkerListner(),this.handler=new m.Handlers}return e.prototype.doPost=function(e,t,r,n,o,i){a.Logger.getInstance().log("=========Inside Do Post Api Method  =========="),a.Logger.getInstance().log("validating arguments are correct or not");try{if((new c.Validators).argumentsValidators.isValidArguments(arguments,!0))return a.Logger.getInstance().log("Argument's are valid ==> set the environment passes is correct or not"),void 0!==e&&(u.EnvironmentStore.getInstance().setEnvironment(e),a.Logger.getInstance().log(u.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("Process the Flow ==> prepare data and call to server"),new Promise(function(e,a){(new l.AppController).run(t,r,n,o,i).then(function(t){!0!==t?(new p.FilterResponse).filterResponse(t).then(function(t){e(t)}).catch(function(e){a(e)}):e(t)}).catch(function(e){a(e)})})}catch(e){throw h.UserResponse.mapAPIResponse(!1,e.response,e.code)}},e.prototype.doPostWithoutParsing=function(e,t,r,n,o,i){a.Logger.getInstance().log("=========Inside Do Post Api Method  =========="),a.Logger.getInstance().log("validating arguments are correct or not");try{if((new c.Validators).argumentsValidators.isValidArguments(arguments,!0))return a.Logger.getInstance().log("Argument's are valid ==> set the environment passes is correct or not"),void 0!==e&&(u.EnvironmentStore.getInstance().setEnvironment(e),a.Logger.getInstance().log(u.EnvironmentStore.getInstance().getEnvironment())),a.Logger.getInstance().log("Process the Flow ==> prepare data and call to server"),new Promise(function(e,a){(new l.AppController).run(t,r,n,o,i).then(function(t){e(t)}).catch(function(e){a(e)})})}catch(e){throw h.UserResponse.mapAPIResponse(!1,e.response,e.code)}},e.prototype.plainRequest=function(e,t,r,o){try{if((new c.Validators).argumentsValidators.isValidArguments(arguments,!0)){var i={url:e.envProps.baseUrl+"/gatewayProcessor",body:t[Object.keys(t)[0]],header:n(n({},r),{orgid:e.envProps.orgId,appid:e.envProps.appId,clientsecret:e.envProps.secureKey,servicename:Object.keys(t)[0],loginid:"",requestid:String(Math.floor(1e8+9e8*Math.random()))})};return new Promise(function(e,r){return(new E.FetchWrapper).doPostCall(i).then(function(n){var i={};if(o&&(i.status=n.status,i.data={}),n.status)for(var a=0,s=Object.keys(n.body);a<s.length;a++){var u=s[a];n.body[u].records[0].data?(o?i.data[u]=n.body[u].records:i[u]=n.body[u].records[0].data.length>0?n.body[u].records[0].data[0].response||n.body[u].records[0].data[0]:[],e(i)):(o?i.data[u]=n.body[u].records:i[u]=n.body[u].records[0].error,r(i))}else i.status=n.status,i.data={},i.data[Object.keys(t)[0]]=n.body,r(i)})})}}catch(e){throw h.UserResponse.mapAPIResponse(!1,e.response,e.code)}},e.prototype.doAuthentication=function(e,t,r){try{if((new c.Validators).argumentsValidators.isValidArguments(arguments,!0))return void 0!==e&&(u.EnvironmentStore.getInstance().setEnvironment(e),a.Logger.getInstance().log(u.EnvironmentStore.getInstance().getEnvironment())),new Promise(function(e,n){(new l.AppController).runAuthenticationdirect(t,r).then(function(t){e(t)}).catch(function(e){n(e)})})}catch(e){throw h.UserResponse.mapAPIResponse(!1,e.response,e.code)}},e.prototype.doPostByUrl=function(e,t,r,n,s,c){var d=this;return new Promise(function(p,g){return o(d,void 0,void 0,function(){var o,d;return i(this,function(i){switch(i.label){case 0:return i.trys.push([0,4,,5]),a.Logger.getInstance().log("=========DO POSTBYURL Method  =========="),a.Logger.getInstance().log("validating arguments are correct or not"),""!==n&&"string"==typeof n&&t instanceof Object&&r instanceof Object?(void 0!==e&&(u.EnvironmentStore.getInstance().setEnvironment(e),a.Logger.getInstance().log(u.EnvironmentStore.getInstance().getEnvironment())),console.log("step 1"),[4,(new l.AppController).runForEndPoint(t,r,n,s,c)]):[3,2];case 1:return o=i.sent(),p(o),[3,3];case 2:p(h.UserResponse.mapAPIResponse(!1,{status:"PW003",message:"Invalid header, body and endPoint passsed"})),i.label=3;case 3:return[3,5];case 4:return d=i.sent(),g(d),[3,5];case 5:return[2]}})})})},e.prototype.config=function(e){a.Logger.getInstance().log("Configuration Passed to API GATEWAY CLIENT => ",e);try{s.AppConfigStore.getInstance().setConfiguration(e)}catch(t){a.Logger.getInstance().error("Error in Setting the Configuration of API GATEWAY CLIENT ==> It can be due to wrong configuration passed",e)}},e.prototype.getStorageAPI=function(){return g.Storage.getInstance()},e.prototype.getEncryptionAPI=function(){return new f.Security},e.prototype.getNetworkUtility=function(){return(new c.Validators).networkValidators},e.prototype.getDMSAPI=function(){return d.DocumentManager.getInstance()},e.prototype.addWorkerHandler=function(e){this.workerHandlers.push(e)},e.prototype.addWorkerListner=function(){var e=this;y.WebWorkerWrapper.getInstance().onmessage=function(t){return o(e,void 0,void 0,function(){var e,r,n,o,s,u=this;return i(this,function(i){switch(i.label){case 0:return"byService"!==t.data.apiType?[3,6]:t.data.resp.status?(a.Logger.getInstance().log("If response is True ==> Save The Credentials"),t.data.platwareRequest.txnkey=t.data.platwareRequest.txnkey,[4,(new v.GatewayResponseHandler).readResponse(t.data.resp.body,t.data.resp.headers,t.data.platwareRequest.loginId,t.data.resp,t.data.platwareRequest.txnkey)]):[3,2];case 1:return e=i.sent(),(new p.FilterResponse).filterResponse(e).then(function(e){var t=e;u.workerHandlers&&u.workerHandlers.forEach(function(e){e.call(null,t)})}).catch(function(e){var t=e;u.workerHandlers&&u.workerHandlers.forEach(function(e){e.call(null,t)})}),[3,5];case 2:return a.Logger.getInstance().log("If response is False ==> Handle the error"),[4,this.handler.httpRespnseponseHandled(t.data.resp.body,t.data.platwareRequest.PWHeader)];case 3:return o=i.sent(),[4,(new v.GatewayResponseHandler).gatewayErrorHandle(o,t.data.resp.body,t.data.uiRequest.body,t.data.uiRequest.header)];case 4:r=i.sent(),this.workerHandlers&&this.workerHandlers.forEach(function(e){e.call(null,Object.assign(r,{uid:t.data.uid}))}),i.label=5;case 5:return[3,11];case 6:return t.data.resp.status?[4,(new w.EndPointResponseHandler).readResponse(t.data.resp.body,t.data.resp.headers,t.data.platwareRequest.txnkey)]:[3,8];case 7:return n=i.sent(),this.workerHandlers&&this.workerHandlers.forEach(function(e){e.call(null,Object.assign(n,{uid:t.data.uid}))}),[3,11];case 8:return a.Logger.getInstance().log("If response is False ==> Handle the error"),[4,this.handler.httpRespnseponseHandled(t.data.resp.body,t.data.uiRequest.PWHeader)];case 9:return o=i.sent(),[4,(new w.EndPointResponseHandler).dynamicRouterErrorHandle(o,t.data.resp.body,t.data.uiRequest)];case 10:s=i.sent(),this.workerHandlers&&this.workerHandlers.forEach(function(e){e.call(null,Object.assign(s,{uid:t.data.uid}))}),i.label=11;case 11:return[2]}})})}},e}();t.APIGateway=I},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return Object.defineProperty(e.prototype,"log",{get:function(){return this.isLogger?console.log.bind(this,"%clog ==>","color:"+this.colorLog("log")):function(){}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"info",{get:function(){return this.isLogger?console.info.bind(this,"%cinfo ==>","color:"+this.colorLog("info")):function(){}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"warn",{get:function(){return this.isLogger?console.warn.bind(this,"%cwarn ==>","color:"+this.colorLog("warn")):function(){}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"error",{get:function(){return this.isLogger?console.error.bind(this,"%cwarn ==>","color:"+this.colorLog("warn")):function(){}},enumerable:!0,configurable:!0}),e.prototype.setLogger=function(e){this.isLogger=e},e.prototype.colorLog=function(e,t){switch(t=t||"black",e){case"log":t="Green";break;case"info":t="DodgerBlue";break;case"error":t="Red";break;case"warn":t="Orange"}return t},e}();t.CustomConsole=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.encryption=e}return e.prototype.aesUtil=function(e,t){this.keySize=e/32,this.iterationCount=t},e.prototype.generateKey=function(e,t){return this.key=this.encryption.PBKDF2(t,this.encryption.enc.Hex.parse(e),{keySize:this.keySize,iterations:this.iterationCount}),this.key},e.prototype.encrypt=function(e,t,r,n){this.key=this.generateKey(e,r),this.encrypted=this.encryption.AES.encrypt(n,this.key,{iv:this.encryption.enc.Hex.parse(t)});try{return this.encrypted.ciphertext.toString(this.encryption.enc.Base64)}catch(e){throw e}},e.prototype.decrypt=function(e,t,r,n){this.key=this.generateKey(e,r);var o=this.encryption.lib.CipherParams.create({ciphertext:this.encryption.enc.Base64.parse(n)});this.decrypted=this.encryption.AES.decrypt(o,this.key,{iv:this.encryption.enc.Hex.parse(t)});try{return this.decrypted.toString(this.encryption.enc.Utf8)}catch(e){throw e}},e.prototype.encryptText=function(e,t){var r=t;return this.aesUtil(256,100),this.encrypt("00000000000000000000000000000000","00000000000000000000000000000000",r,e)},e.prototype.decryptText=function(e,t){var r=t;return this.aesUtil(256,100),this.decrypt("00000000000000000000000000000000","00000000000000000000000000000000",r,e)},e.prototype.getHexString=function(e){return this.hexString=this.encryption.enc.Hex.parse("39563JSHUSJNS18"),this.hexString},e.prototype.getEncryption=function(e,t){return this.encryptedString=this.encryptText(e,t),this.encryptedString},e.prototype.getDecryption=function(e,t){return this.decryptedString=this.decryptText(e,t),void 0!==this.decryptedString?this.decryptedString:""},e.prototype.getHashValue=function(e,t){return this.hash=this.encryption.HmacSHA512(e,t).toString(),this.hash},e}();t.AESEncryption=n},function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(window,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=3)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RSAKey=void 0,t.parseBigInt=i;var n=r(8),o=r(10);function i(e,t){return new n.BigInteger(e,t)}var a=t.RSAKey=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null};a.prototype.doPublic=function(e){return e.modPowInt(this.e,this.n)},a.prototype.setPublic=function(e,t){null!=e&&null!=t&&e.length>0&&t.length>0?(this.n=i(e,16),this.e=parseInt(t,16)):console.error("Invalid RSA public key")},a.prototype.encrypt=function(e){var t=function(e,t){if(t<e.length+11)return console.error("Message too long for RSA"),null;for(var r=[],i=e.length-1;i>=0&&t>0;){var a=e.charCodeAt(i--);a<128?r[--t]=a:a>127&&a<2048?(r[--t]=63&a|128,r[--t]=a>>6|192):(r[--t]=63&a|128,r[--t]=a>>6&63|128,r[--t]=a>>12|224)}r[--t]=0;for(var s=new o.SecureRandom,u=[];t>2;){for(u[0]=0;0==u[0];)s.nextBytes(u);r[--t]=u[0]}return r[--t]=2,r[--t]=0,new n.BigInteger(r)}(e,this.n.bitLength()+7>>3);if(null==t)return null;var r=this.doPublic(t);if(null==r)return null;var i=r.toString(16);return 0==(1&i.length)?i:"0"+i}},function(e,t,r){var n,o,i;e.exports=(i=i||function(e,t){var r=Object.create||function(){function e(){}return function(t){var r;return e.prototype=t,r=new e,e.prototype=null,r}}(),n={},o=n.lib={},i=o.Base={extend:function(e){var t=r(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},a=o.WordArray=i.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||u).stringify(this)},concat:function(e){var t=this.words,r=e.words,n=this.sigBytes,o=e.sigBytes;if(this.clamp(),n%4)for(var i=0;i<o;i++){var a=r[i>>>2]>>>24-i%4*8&255;t[n+i>>>2]|=a<<24-(n+i)%4*8}else for(i=0;i<o;i+=4)t[n+i>>>2]=r[i>>>2];return this.sigBytes+=o,this},clamp:function(){var t=this.words,r=this.sigBytes;t[r>>>2]&=4294967295<<32-r%4*8,t.length=e.ceil(r/4)},clone:function(){var e=i.clone.call(this);return e.words=this.words.slice(0),e},random:function(t){for(var r,n=[],o=function(t){t=t;var r=987654321,n=4294967295;return function(){var o=((r=36969*(65535&r)+(r>>16)&n)<<16)+(t=18e3*(65535&t)+(t>>16)&n)&n;return o/=4294967296,(o+=.5)*(e.random()>.5?1:-1)}},i=0;i<t;i+=4){var s=o(4294967296*(r||e.random()));r=987654071*s(),n.push(4294967296*s()|0)}return new a.init(n,t)}}),s=n.enc={},u=s.Hex={stringify:function(e){for(var t=e.words,r=e.sigBytes,n=[],o=0;o<r;o++){var i=t[o>>>2]>>>24-o%4*8&255;n.push((i>>>4).toString(16)),n.push((15&i).toString(16))}return n.join("")},parse:function(e){for(var t=e.length,r=[],n=0;n<t;n+=2)r[n>>>3]|=parseInt(e.substr(n,2),16)<<24-n%8*4;return new a.init(r,t/2)}},c=s.Latin1={stringify:function(e){for(var t=e.words,r=e.sigBytes,n=[],o=0;o<r;o++){var i=t[o>>>2]>>>24-o%4*8&255;n.push(String.fromCharCode(i))}return n.join("")},parse:function(e){for(var t=e.length,r=[],n=0;n<t;n++)r[n>>>2]|=(255&e.charCodeAt(n))<<24-n%4*8;return new a.init(r,t)}},l=s.Utf8={stringify:function(e){try{return decodeURIComponent(escape(c.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return c.parse(unescape(encodeURIComponent(e)))}},d=o.BufferedBlockAlgorithm=i.extend({reset:function(){this._data=new a.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=l.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var r=this._data,n=r.words,o=r.sigBytes,i=this.blockSize,s=o/(4*i),u=(s=t?e.ceil(s):e.max((0|s)-this._minBufferSize,0))*i,c=e.min(4*u,o);if(u){for(var l=0;l<u;l+=i)this._doProcessBlock(n,l);var d=n.splice(0,u);r.sigBytes-=c}return new a.init(d,c)},clone:function(){var e=i.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),p=(o.Hasher=d.extend({cfg:i.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){d.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,r){return new e.init(r).finalize(t)}},_createHmacHelper:function(e){return function(t,r){return new p.HMAC.init(e,r).finalize(t)}}}),n.algo={});return n}(Math),o=(n=i).lib.WordArray,n.enc.Base64={stringify:function(e){var t=e.words,r=e.sigBytes,n=this._map;e.clamp();for(var o=[],i=0;i<r;i+=3)for(var a=(t[i>>>2]>>>24-i%4*8&255)<<16|(t[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|t[i+2>>>2]>>>24-(i+2)%4*8&255,s=0;s<4&&i+.75*s<r;s++)o.push(n.charAt(a>>>6*(3-s)&63));var u=n.charAt(64);if(u)for(;o.length%4;)o.push(u);return o.join("")},parse:function(e){var t=e.length,r=this._map,n=this._reverseMap;if(!n){n=this._reverseMap=[];for(var i=0;i<r.length;i++)n[r.charCodeAt(i)]=i}var a=r.charAt(64);if(a){var s=e.indexOf(a);-1!==s&&(t=s)}return function(e,t,r){for(var n=[],i=0,a=0;a<t;a++)if(a%4){var s=r[e.charCodeAt(a-1)]<<a%4*2,u=r[e.charCodeAt(a)]>>>6-a%4*2;n[i>>>2]|=(s|u)<<24-i%4*8,i++}return o.create(n,i)}(e,t,n)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},function(){var e=i,t=e.lib.Base,r=e.enc.Utf8;e.algo.HMAC=t.extend({init:function(e,t){e=this._hasher=new e.init,"string"==typeof t&&(t=r.parse(t));var n=e.blockSize,o=4*n;t.sigBytes>o&&(t=e.finalize(t)),t.clamp();for(var i=this._oKey=t.clone(),a=this._iKey=t.clone(),s=i.words,u=a.words,c=0;c<n;c++)s[c]^=1549556828,u[c]^=909522486;i.sigBytes=a.sigBytes=o,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,r=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(r))}})}(),function(){var e=i,t=e.lib,r=t.WordArray,n=t.Hasher,o=e.algo,a=[],s=o.SHA1=n.extend({_doReset:function(){this._hash=new r.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var r=this._hash.words,n=r[0],o=r[1],i=r[2],s=r[3],u=r[4],c=0;c<80;c++){if(c<16)a[c]=0|e[t+c];else{var l=a[c-3]^a[c-8]^a[c-14]^a[c-16];a[c]=l<<1|l>>>31}var d=(n<<5|n>>>27)+u+a[c];d+=c<20?1518500249+(o&i|~o&s):c<40?1859775393+(o^i^s):c<60?(o&i|o&s|i&s)-1894007588:(o^i^s)-899497514,u=s,s=i,i=o<<30|o>>>2,o=n,n=d}r[0]=r[0]+n|0,r[1]=r[1]+o|0,r[2]=r[2]+i|0,r[3]=r[3]+s|0,r[4]=r[4]+u|0},_doFinalize:function(){var e=this._data,t=e.words,r=8*this._nDataBytes,n=8*e.sigBytes;return t[n>>>5]|=128<<24-n%32,t[14+(n+64>>>9<<4)]=Math.floor(r/4294967296),t[15+(n+64>>>9<<4)]=r,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=n.clone.call(this);return e._hash=this._hash.clone(),e}});e.SHA1=n._createHelper(s),e.HmacSHA1=n._createHmacHelper(s)}(),function(){var e=i,t=e.lib,r=t.Base,n=t.WordArray,o=e.algo,a=o.SHA1,s=o.HMAC,u=o.PBKDF2=r.extend({cfg:r.extend({keySize:4,hasher:a,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var r=this.cfg,o=s.create(r.hasher,e),i=n.create(),a=n.create([1]),u=i.words,c=a.words,l=r.keySize,d=r.iterations;u.length<l;){var p=o.update(t).finalize(a);o.reset();for(var h=p.words,g=h.length,f=p,y=1;y<d;y++){f=o.finalize(f),o.reset();for(var v=f.words,m=0;m<g;m++)h[m]^=v[m]}i.concat(p),c[0]++}return i.sigBytes=4*l,i}});e.PBKDF2=function(e,t,r){return u.create(r).compute(e,t)}}(),function(e){var t=i,r=t.lib,n=r.Base,o=r.WordArray,a=t.x64={};a.Word=n.extend({init:function(e,t){this.high=e,this.low=t}}),a.WordArray=n.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:8*e.length},toX32:function(){for(var e=this.words,t=e.length,r=[],n=0;n<t;n++){var i=e[n];r.push(i.high),r.push(i.low)}return o.create(r,this.sigBytes)},clone:function(){for(var e=n.clone.call(this),t=e.words=this.words.slice(0),r=t.length,o=0;o<r;o++)t[o]=t[o].clone();return e}})}(),function(){var e=i,t=e.lib.Hasher,r=e.x64,n=r.Word,o=r.WordArray,a=e.algo;function s(){return n.create.apply(n,arguments)}var u=[s(1116352408,3609767458),s(1899447441,602891725),s(3049323471,3964484399),s(3921009573,2173295548),s(961987163,4081628472),s(1508970993,3053834265),s(2453635748,2937671579),s(2870763221,3664609560),s(3624381080,2734883394),s(310598401,1164996542),s(607225278,1323610764),s(1426881987,3590304994),s(1925078388,4068182383),s(2162078206,991336113),s(2614888103,633803317),s(3248222580,3479774868),s(3835390401,2666613458),s(4022224774,944711139),s(264347078,2341262773),s(604807628,2007800933),s(770255983,1495990901),s(1249150122,1856431235),s(1555081692,3175218132),s(1996064986,2198950837),s(2554220882,3999719339),s(2821834349,766784016),s(2952996808,2566594879),s(3210313671,3203337956),s(3336571891,1034457026),s(3584528711,2466948901),s(113926993,3758326383),s(338241895,168717936),s(666307205,1188179964),s(773529912,1546045734),s(1294757372,1522805485),s(1396182291,2643833823),s(1695183700,2343527390),s(1986661051,1014477480),s(2177026350,1206759142),s(2456956037,344077627),s(2730485921,1290863460),s(2820302411,3158454273),s(3259730800,3505952657),s(3345764771,106217008),s(3516065817,3606008344),s(3600352804,1432725776),s(4094571909,1467031594),s(275423344,851169720),s(430227734,3100823752),s(506948616,1363258195),s(659060556,3750685593),s(883997877,3785050280),s(958139571,3318307427),s(1322822218,3812723403),s(1537002063,2003034995),s(1747873779,3602036899),s(1955562222,1575990012),s(2024104815,1125592928),s(2227730452,2716904306),s(2361852424,442776044),s(2428436474,593698344),s(2756734187,3733110249),s(3204031479,2999351573),s(3329325298,3815920427),s(3391569614,3928383900),s(3515267271,566280711),s(3940187606,3454069534),s(4118630271,4000239992),s(116418474,1914138554),s(174292421,2731055270),s(289380356,3203993006),s(460393269,320620315),s(685471733,587496836),s(852142971,1086792851),s(1017036298,365543100),s(1126000580,2618297676),s(1288033470,3409855158),s(1501505948,4234509866),s(1607167915,987167468),s(1816402316,1246189591)],c=[];!function(){for(var e=0;e<80;e++)c[e]=s()}();var l=a.SHA512=t.extend({_doReset:function(){this._hash=new o.init([new n.init(1779033703,4089235720),new n.init(3144134277,2227873595),new n.init(1013904242,4271175723),new n.init(2773480762,1595750129),new n.init(1359893119,2917565137),new n.init(2600822924,725511199),new n.init(528734635,4215389547),new n.init(1541459225,327033209)])},_doProcessBlock:function(e,t){for(var r=this._hash.words,n=r[0],o=r[1],i=r[2],a=r[3],s=r[4],l=r[5],d=r[6],p=r[7],h=n.high,g=n.low,f=o.high,y=o.low,v=i.high,m=i.low,w=a.high,E=a.low,I=s.high,P=s.low,b=l.high,S=l.low,A=d.high,R=d.low,C=p.high,T=p.low,O=h,B=g,_=f,D=y,k=v,x=m,H=w,M=E,q=I,L=P,N=b,U=S,W=A,V=R,F=C,K=T,j=0;j<80;j++){var G=c[j];if(j<16)var z=G.high=0|e[t+2*j],J=G.low=0|e[t+2*j+1];else{var X=c[j-15],Y=X.high,Z=X.low,Q=(Y>>>1|Z<<31)^(Y>>>8|Z<<24)^Y>>>7,$=(Z>>>1|Y<<31)^(Z>>>8|Y<<24)^(Z>>>7|Y<<25),ee=c[j-2],te=ee.high,re=ee.low,ne=(te>>>19|re<<13)^(te<<3|re>>>29)^te>>>6,oe=(re>>>19|te<<13)^(re<<3|te>>>29)^(re>>>6|te<<26),ie=c[j-7],ae=ie.high,se=ie.low,ue=c[j-16],ce=ue.high,le=ue.low;z=(z=(z=Q+ae+((J=$+se)>>>0<$>>>0?1:0))+ne+((J+=oe)>>>0<oe>>>0?1:0))+ce+((J+=le)>>>0<le>>>0?1:0),G.high=z,G.low=J}var de,pe=q&N^~q&W,he=L&U^~L&V,ge=O&_^O&k^_&k,fe=B&D^B&x^D&x,ye=(O>>>28|B<<4)^(O<<30|B>>>2)^(O<<25|B>>>7),ve=(B>>>28|O<<4)^(B<<30|O>>>2)^(B<<25|O>>>7),me=(q>>>14|L<<18)^(q>>>18|L<<14)^(q<<23|L>>>9),we=(L>>>14|q<<18)^(L>>>18|q<<14)^(L<<23|q>>>9),Ee=u[j],Ie=Ee.high,Pe=Ee.low,be=F+me+((de=K+we)>>>0<K>>>0?1:0),Se=ve+fe;F=W,K=V,W=N,V=U,N=q,U=L,q=H+(be=(be=(be=be+pe+((de+=he)>>>0<he>>>0?1:0))+Ie+((de+=Pe)>>>0<Pe>>>0?1:0))+z+((de+=J)>>>0<J>>>0?1:0))+((L=M+de|0)>>>0<M>>>0?1:0)|0,H=k,M=x,k=_,x=D,_=O,D=B,O=be+(ye+ge+(Se>>>0<ve>>>0?1:0))+((B=de+Se|0)>>>0<de>>>0?1:0)|0}g=n.low=g+B,n.high=h+O+(g>>>0<B>>>0?1:0),y=o.low=y+D,o.high=f+_+(y>>>0<D>>>0?1:0),m=i.low=m+x,i.high=v+k+(m>>>0<x>>>0?1:0),E=a.low=E+M,a.high=w+H+(E>>>0<M>>>0?1:0),P=s.low=P+L,s.high=I+q+(P>>>0<L>>>0?1:0),S=l.low=S+U,l.high=b+N+(S>>>0<U>>>0?1:0),R=d.low=R+V,d.high=A+W+(R>>>0<V>>>0?1:0),T=p.low=T+K,p.high=C+F+(T>>>0<K>>>0?1:0)},_doFinalize:function(){var e=this._data,t=e.words,r=8*this._nDataBytes,n=8*e.sigBytes;return t[n>>>5]|=128<<24-n%32,t[30+(n+128>>>10<<5)]=Math.floor(r/4294967296),t[31+(n+128>>>10<<5)]=r,e.sigBytes=4*t.length,this._process(),this._hash.toX32()},clone:function(){var e=t.clone.call(this);return e._hash=this._hash.clone(),e},blockSize:32});e.SHA512=t._createHelper(l),e.HmacSHA512=t._createHmacHelper(l)}(),i.lib.Cipher||function(e){var t=i,r=t.lib,n=r.Base,o=r.WordArray,a=r.BufferedBlockAlgorithm,s=t.enc,u=(s.Utf8,s.Base64),c=t.algo.EvpKDF,l=r.Cipher=a.extend({cfg:n.extend(),createEncryptor:function(e,t){return this.create(this._ENC_XFORM_MODE,e,t)},createDecryptor:function(e,t){return this.create(this._DEC_XFORM_MODE,e,t)},init:function(e,t,r){this.cfg=this.cfg.extend(r),this._xformMode=e,this._key=t,this.reset()},reset:function(){a.reset.call(this),this._doReset()},process:function(e){return this._append(e),this._process()},finalize:function(e){return e&&this._append(e),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function e(e){return"string"==typeof e?w:v}return function(t){return{encrypt:function(r,n,o){return e(n).encrypt(t,r,n,o)},decrypt:function(r,n,o){return e(n).decrypt(t,r,n,o)}}}}()}),d=(r.StreamCipher=l.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),t.mode={}),p=r.BlockCipherMode=n.extend({createEncryptor:function(e,t){return this.Encryptor.create(e,t)},createDecryptor:function(e,t){return this.Decryptor.create(e,t)},init:function(e,t){this._cipher=e,this._iv=t}}),h=d.CBC=function(){var t=p.extend();function r(t,r,n){var o=this._iv;if(o){var i=o;this._iv=e}else i=this._prevBlock;for(var a=0;a<n;a++)t[r+a]^=i[a]}return t.Encryptor=t.extend({processBlock:function(e,t){var n=this._cipher,o=n.blockSize;r.call(this,e,t,o),n.encryptBlock(e,t),this._prevBlock=e.slice(t,t+o)}}),t.Decryptor=t.extend({processBlock:function(e,t){var n=this._cipher,o=n.blockSize,i=e.slice(t,t+o);n.decryptBlock(e,t),r.call(this,e,t,o),this._prevBlock=i}}),t}(),g=(t.pad={}).Pkcs7={pad:function(e,t){for(var r=4*t,n=r-e.sigBytes%r,i=n<<24|n<<16|n<<8|n,a=[],s=0;s<n;s+=4)a.push(i);var u=o.create(a,n);e.concat(u)},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},f=(r.BlockCipher=l.extend({cfg:l.cfg.extend({mode:h,padding:g}),reset:function(){l.reset.call(this);var e=this.cfg,t=e.iv,r=e.mode;if(this._xformMode==this._ENC_XFORM_MODE)var n=r.createEncryptor;else n=r.createDecryptor,this._minBufferSize=1;this._mode&&this._mode.__creator==n?this._mode.init(this,t&&t.words):(this._mode=n.call(r,this,t&&t.words),this._mode.__creator=n)},_doProcessBlock:function(e,t){this._mode.processBlock(e,t)},_doFinalize:function(){var e=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){e.pad(this._data,this.blockSize);var t=this._process(!0)}else t=this._process(!0),e.unpad(t);return t},blockSize:4}),r.CipherParams=n.extend({init:function(e){this.mixIn(e)},toString:function(e){return(e||this.formatter).stringify(this)}})),y=(t.format={}).OpenSSL={stringify:function(e){var t=e.ciphertext,r=e.salt;if(r)var n=o.create([1398893684,1701076831]).concat(r).concat(t);else n=t;return n.toString(u)},parse:function(e){var t=u.parse(e),r=t.words;if(1398893684==r[0]&&1701076831==r[1]){var n=o.create(r.slice(2,4));r.splice(0,4),t.sigBytes-=16}return f.create({ciphertext:t,salt:n})}},v=r.SerializableCipher=n.extend({cfg:n.extend({format:y}),encrypt:function(e,t,r,n){n=this.cfg.extend(n);var o=e.createEncryptor(r,n),i=o.finalize(t),a=o.cfg;return f.create({ciphertext:i,key:r,iv:a.iv,algorithm:e,mode:a.mode,padding:a.padding,blockSize:e.blockSize,formatter:n.format})},decrypt:function(e,t,r,n){return n=this.cfg.extend(n),t=this._parse(t,n.format),e.createDecryptor(r,n).finalize(t.ciphertext)},_parse:function(e,t){return"string"==typeof e?t.parse(e,this):e}}),m=(t.kdf={}).OpenSSL={execute:function(e,t,r,n){n||(n=o.random(8));var i=c.create({keySize:t+r}).compute(e,n),a=o.create(i.words.slice(t),4*r);return i.sigBytes=4*t,f.create({key:i,iv:a,salt:n})}},w=r.PasswordBasedCipher=v.extend({cfg:v.cfg.extend({kdf:m}),encrypt:function(e,t,r,n){var o=(n=this.cfg.extend(n)).kdf.execute(r,e.keySize,e.ivSize);n.iv=o.iv;var i=v.encrypt.call(this,e,t,o.key,n);return i.mixIn(o),i},decrypt:function(e,t,r,n){n=this.cfg.extend(n),t=this._parse(t,n.format);var o=n.kdf.execute(r,e.keySize,e.ivSize,t.salt);return n.iv=o.iv,v.decrypt.call(this,e,t,o.key,n)}})}(),function(){var e=i,t=e.lib.BlockCipher,r=e.algo,n=[],o=[],a=[],s=[],u=[],c=[],l=[],d=[],p=[],h=[];!function(){for(var e=[],t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;var r=0,i=0;for(t=0;t<256;t++){var g=i^i<<1^i<<2^i<<3^i<<4;g=g>>>8^255&g^99,n[r]=g,o[g]=r;var f=e[r],y=e[f],v=e[y],m=257*e[g]^16843008*g;a[r]=m<<24|m>>>8,s[r]=m<<16|m>>>16,u[r]=m<<8|m>>>24,c[r]=m,m=16843009*v^65537*y^257*f^16843008*r,l[g]=m<<24|m>>>8,d[g]=m<<16|m>>>16,p[g]=m<<8|m>>>24,h[g]=m,r?(r=f^e[e[e[v^f]]],i^=e[e[i]]):r=i=1}}();var g=[0,1,2,4,8,16,32,64,128,27,54],f=r.AES=t.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var e=this._keyPriorReset=this._key,t=e.words,r=e.sigBytes/4,o=4*((this._nRounds=r+6)+1),i=this._keySchedule=[],a=0;a<o;a++)if(a<r)i[a]=t[a];else{var s=i[a-1];a%r?r>6&&a%r==4&&(s=n[s>>>24]<<24|n[s>>>16&255]<<16|n[s>>>8&255]<<8|n[255&s]):(s=n[(s=s<<8|s>>>24)>>>24]<<24|n[s>>>16&255]<<16|n[s>>>8&255]<<8|n[255&s],s^=g[a/r|0]<<24),i[a]=i[a-r]^s}for(var u=this._invKeySchedule=[],c=0;c<o;c++)a=o-c,s=c%4?i[a]:i[a-4],u[c]=c<4||a<=4?s:l[n[s>>>24]]^d[n[s>>>16&255]]^p[n[s>>>8&255]]^h[n[255&s]]}},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._keySchedule,a,s,u,c,n)},decryptBlock:function(e,t){var r=e[t+1];e[t+1]=e[t+3],e[t+3]=r,this._doCryptBlock(e,t,this._invKeySchedule,l,d,p,h,o),r=e[t+1],e[t+1]=e[t+3],e[t+3]=r},_doCryptBlock:function(e,t,r,n,o,i,a,s){for(var u=this._nRounds,c=e[t]^r[0],l=e[t+1]^r[1],d=e[t+2]^r[2],p=e[t+3]^r[3],h=4,g=1;g<u;g++){var f=n[c>>>24]^o[l>>>16&255]^i[d>>>8&255]^a[255&p]^r[h++],y=n[l>>>24]^o[d>>>16&255]^i[p>>>8&255]^a[255&c]^r[h++],v=n[d>>>24]^o[p>>>16&255]^i[c>>>8&255]^a[255&l]^r[h++],m=n[p>>>24]^o[c>>>16&255]^i[l>>>8&255]^a[255&d]^r[h++];c=f,l=y,d=v,p=m}f=(s[c>>>24]<<24|s[l>>>16&255]<<16|s[d>>>8&255]<<8|s[255&p])^r[h++],y=(s[l>>>24]<<24|s[d>>>16&255]<<16|s[p>>>8&255]<<8|s[255&c])^r[h++],v=(s[d>>>24]<<24|s[p>>>16&255]<<16|s[c>>>8&255]<<8|s[255&l])^r[h++],m=(s[p>>>24]<<24|s[c>>>16&255]<<16|s[l>>>8&255]<<8|s[255&d])^r[h++],e[t]=f,e[t+1]=y,e[t+2]=v,e[t+3]=m},keySize:8});e.AES=t._createHelper(f)}(),i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JSEncrypt=void 0;var n=r(4),o=r(5),i=r(6),a=r(7),s=r(0),u=r(12);function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.ASN1.prototype.getHexStringValue=function(){var e=this.toHexString(),t=2*this.header,r=2*this.length;return e.substr(t,r)},a.RSAKey.prototype.parseKey=function(e){try{var t=0,r=0,a=/^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(e)?o.Hex.decode(e):i.Base64.unarmor(e),u=n.ASN1.decode(a);if(3===u.sub.length&&(u=u.sub[2].sub[0]),9===u.sub.length){t=u.sub[1].getHexStringValue(),this.n=(0,s.parseBigInt)(t,16),r=u.sub[2].getHexStringValue(),this.e=parseInt(r,16);var c=u.sub[3].getHexStringValue();this.d=(0,s.parseBigInt)(c,16);var l=u.sub[4].getHexStringValue();this.p=(0,s.parseBigInt)(l,16);var d=u.sub[5].getHexStringValue();this.q=(0,s.parseBigInt)(d,16);var p=u.sub[6].getHexStringValue();this.dmp1=(0,s.parseBigInt)(p,16);var h=u.sub[7].getHexStringValue();this.dmq1=(0,s.parseBigInt)(h,16);var g=u.sub[8].getHexStringValue();this.coeff=(0,s.parseBigInt)(g,16)}else{if(2!==u.sub.length)return!1;var f=u.sub[1].sub[0];t=f.sub[0].getHexStringValue(),this.n=(0,s.parseBigInt)(t,16),r=f.sub[1].getHexStringValue(),this.e=parseInt(r,16)}return!0}catch(e){return!1}},a.RSAKey.prototype.hasPrivateKeyProperty=function(e){return(e=e||{}).hasOwnProperty("n")&&e.hasOwnProperty("e")&&e.hasOwnProperty("d")&&e.hasOwnProperty("p")&&e.hasOwnProperty("q")&&e.hasOwnProperty("dmp1")&&e.hasOwnProperty("dmq1")&&e.hasOwnProperty("coeff")},a.RSAKey.prototype.hasPublicKeyProperty=function(e){return(e=e||{}).hasOwnProperty("n")&&e.hasOwnProperty("e")},a.RSAKey.prototype.parsePropertiesFrom=function(e){this.n=e.n,this.e=e.e,e.hasOwnProperty("d")&&(this.d=e.d,this.p=e.p,this.q=e.q,this.dmp1=e.dmp1,this.dmq1=e.dmq1,this.coeff=e.coeff)};var l=function(e){function t(e){c(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e&&("string"==typeof e?r.parseKey(e):(r.hasPrivateKeyProperty(e)||r.hasPublicKeyProperty(e))&&r.parsePropertiesFrom(e)),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.RSAKey),t}(),d=t.JSEncrypt=function e(t){c(this,e),t=t||{},this.default_key_size=parseInt(t.default_key_size)||1024,this.default_public_exponent=t.default_public_exponent||"010001",this.log=t.log||!1,this.key=null};d.prototype.setKey=function(e){this.log&&this.key&&console.warn("A key was already set, overriding existing."),this.key=new l(e)},d.prototype.setPublicKey=function(e){this.setKey(e)},d.prototype.encrypt=function(e){try{return(0,u.hex2b64)(this.getKey().encrypt(e))}catch(e){return!1}},d.prototype.getKey=function(e){if(!this.key){if(this.key=new l,e&&"[object Function]"==={}.toString.call(e))return void this.key.generateAsync(this.default_key_size,this.default_public_exponent,e);this.key.generate(this.default_key_size,this.default_public_exponent)}return this.key}},function(e,t,r){"use strict";r.r(t),r.d(t,"Encryption",function(){return i});var n=r(1),o=r(2);class i{constructor(){this.cryptoJs=n,this.jsEncrypt=o}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a=function(e,t){var r=document.createElement(e);return r.className=t,r},s=function(e){return document.createTextNode(e)},u=function(){function e(t,r){i(this,e),t instanceof e?(this.enc=t.enc,this.pos=t.pos):(this.enc=t,this.pos=r)}return o(e,null,[{key:"hexDigits",get:function(){return"0123456789ABCDEF"}},{key:"reTime",get:function(){return/^((?:1[89]|2\d)?\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/}}]),o(e,[{key:"get",value:function(e){if(void 0===e&&(e=this.pos++),e>=this.enc.length)throw"Requesting byte offset "+e+" on a stream of length "+this.enc.length;return this.enc[e]}},{key:"hexByte",value:function(t){return e.hexDigits.charAt(t>>4&15)+e.hexDigits.charAt(15&t)}},{key:"hexDump",value:function(e,t,r){for(var n="",o=e;o<t;++o)if(n+=this.hexByte(this.get(o)),!0!==r)switch(15&o){case 7:n+="  ";break;case 15:n+="\n";break;default:n+=" "}return n}},{key:"parseStringISO",value:function(e,t){for(var r="",n=e;n<t;++n)r+=String.fromCharCode(this.get(n));return r}},{key:"parseStringUTF",value:function(e,t){for(var r="",n=e;n<t;){var o=this.get(n++);r+=o<128?String.fromCharCode(o):o>191&&o<224?String.fromCharCode((31&o)<<6|63&this.get(n++)):String.fromCharCode((15&o)<<12|(63&this.get(n++))<<6|63&this.get(n++))}return r}},{key:"parseStringBMP",value:function(e,t){for(var r="",n=e;n<t;n+=2){var o=this.get(n),i=this.get(n+1);r+=String.fromCharCode((o<<8)+i)}return r}},{key:"parseTime",value:function(t,r){var n=this.parseStringISO(t,r),o=e.reTime.exec(n);return o?(n=o[1]+"-"+o[2]+"-"+o[3]+" "+o[4],o[5]&&(n+=":"+o[5],o[6]&&(n+=":"+o[6],o[7]&&(n+="."+o[7]))),o[8]&&(n+=" UTC","Z"!=o[8]&&(n+=o[8],o[9]&&(n+=":"+o[9]))),n):"Unrecognized time: "+n}},{key:"parseInteger",value:function(e,t){var r=t-e;if(r>4){r<<=3;var n=this.get(e);if(0===n)r-=8;else for(;n<128;)n<<=1,--r;return"("+r+" bit)"}for(var o=0,i=e;i<t;++i)o=o<<8|this.get(i);return o}},{key:"parseBitString",value:function(e,t){var r=this.get(e),n=(t-e-1<<3)-r,o="("+n+" bit)";if(n<=20){var i=r;o+=" ";for(var a=t-1;a>e;--a){for(var s=this.get(a),u=i;u<8;++u)o+=s>>u&1?"1":"0";i=0}}return o}},{key:"parseOctetString",value:function(e,t){var r=t-e,n="("+r+" byte) ";r>100&&(t=e+100);for(var o=e;o<t;++o)n+=this.hexByte(this.get(o));return r>100&&(n+="…"),n}},{key:"parseOID",value:function(e,t){for(var r="",n=0,o=0,i=e;i<t;++i){var a=this.get(i);if(n=n<<7|127&a,o+=7,!(128&a)){if(""===r){var s=n<80?n<40?0:1:2;r=s+"."+(n-40*s)}else r+="."+(o>=31?"bigint":n);n=o=0}}return r}}]),e}(),c=t.ASN1=function(){function e(t,r,n,o,a){i(this,e),this.stream=t,this.header=r,this.length=n,this.tag=o,this.sub=a}return o(e,null,[{key:"reSeemsASCII",get:function(){return/^[ -~]+$/}}]),o(e,[{key:"typeName",value:function(){if(void 0===this.tag)return"unknown";var e=this.tag>>6,t=(this.tag,31&this.tag);switch(e){case 0:switch(t){case 0:return"EOC";case 1:return"BOOLEAN";case 2:return"INTEGER";case 3:return"BIT_STRING";case 4:return"OCTET_STRING";case 5:return"NULL";case 6:return"OBJECT_IDENTIFIER";case 7:return"ObjectDescriptor";case 8:return"EXTERNAL";case 9:return"REAL";case 10:return"ENUMERATED";case 11:return"EMBEDDED_PDV";case 12:return"UTF8String";case 16:return"SEQUENCE";case 17:return"SET";case 18:return"NumericString";case 19:return"PrintableString";case 20:return"TeletexString";case 21:return"VideotexString";case 22:return"IA5String";case 23:return"UTCTime";case 24:return"GeneralizedTime";case 25:return"GraphicString";case 26:return"VisibleString";case 27:return"GeneralString";case 28:return"UniversalString";case 30:return"BMPString";default:return"Universal_"+t.toString(16)}case 1:return"Application_"+t.toString(16);case 2:return"["+t+"]";case 3:return"Private_"+t.toString(16)}}},{key:"content",value:function(){if(void 0===this.tag)return null;var t=this.tag>>6,r=31&this.tag,n=this.posContent(),o=Math.abs(this.length);if(0!==t){if(null!==this.sub)return"("+this.sub.length+" elem)";var i=this.stream.parseStringISO(n,n+Math.min(o,100));return e.reSeemsASCII.test(i)?i.substring(0,200)+(i.length>200?"…":""):this.stream.parseOctetString(n,n+o)}switch(r){case 1:return 0===this.stream.get(n)?"false":"true";case 2:return this.stream.parseInteger(n,n+o);case 3:return this.sub?"("+this.sub.length+" elem)":this.stream.parseBitString(n,n+o);case 4:return this.sub?"("+this.sub.length+" elem)":this.stream.parseOctetString(n,n+o);case 6:return this.stream.parseOID(n,n+o);case 16:case 17:return"("+this.sub.length+" elem)";case 12:return this.stream.parseStringUTF(n,n+o);case 18:case 19:case 20:case 21:case 22:case 26:return this.stream.parseStringISO(n,n+o);case 30:return this.stream.parseStringBMP(n,n+o);case 23:case 24:return this.stream.parseTime(n,n+o)}return null}},{key:"toString",value:function(){return this.typeName()+"@"+this.stream.pos+"[header:"+this.header+",length:"+this.length+",sub:"+(null===this.sub?"null":this.sub.length)+"]"}},{key:"print",value:function(e){if(void 0===e&&(e=""),document.writeln(e+this),null!==this.sub){e+="  ";for(var t=0,r=this.sub.length;t<r;++t)this.sub[t].print(e)}}},{key:"toPrettyString",value:function(e){void 0===e&&(e="");var t=e+this.typeName()+" @"+this.stream.pos;if(this.length>=0&&(t+="+"),t+=this.length,32&this.tag?t+=" (constructed)":3!=this.tag&&4!=this.tag||null===this.sub||(t+=" (encapsulates)"),t+="\n",null!==this.sub){e+="  ";for(var r=0,n=this.sub.length;r<n;++r)t+=this.sub[r].toPrettyString(e)}return t}},{key:"toDOM",value:function(){var e=a("div","node");e.asn1=this;var t=a("div","head"),r=this.typeName().replace(/_/g," ");t.innerHTML=r;var o=this.content();if(null!==o){o=String(o).replace(/</g,"&lt;");var i=a("span","preview");i.appendChild(s(o)),t.appendChild(i)}e.appendChild(t),this.node=e,this.head=t;var u=a("div","value");if(r="Offset: "+this.stream.pos+"<br/>",r+="Length: "+this.header+"+",this.length>=0?r+=this.length:r+=-this.length+" (undefined)",32&this.tag?r+="<br/>(constructed)":3!=this.tag&&4!=this.tag||null===this.sub||(r+="<br/>(encapsulates)"),null!==o&&(r+="<br/>Value:<br/><b>"+o+"</b>","object"===("undefined"==typeof oids?"undefined":n(oids))&&6==this.tag)){var c=oids[o];c&&(c.d&&(r+="<br/>"+c.d),c.c&&(r+="<br/>"+c.c),c.w&&(r+="<br/>(warning!)"))}u.innerHTML=r,e.appendChild(u);var l=a("div","sub");if(null!==this.sub)for(var d=0,p=this.sub.length;d<p;++d)l.appendChild(this.sub[d].toDOM());return e.appendChild(l),t.onclick=function(){e.className="node collapsed"==e.className?"node":"node collapsed"},e}},{key:"posStart",value:function(){return this.stream.pos}},{key:"posContent",value:function(){return this.stream.pos+this.header}},{key:"posEnd",value:function(){return this.stream.pos+this.header+Math.abs(this.length)}},{key:"fakeHover",value:function(e){this.node.className+=" hover",e&&(this.head.className+=" hover")}},{key:"fakeOut",value:function(e){var t=/ ?hover/;this.node.className=this.node.className.replace(t,""),e&&(this.head.className=this.head.className.replace(t,""))}},{key:"toHexDOM_sub",value:function(e,t,r,n,o){if(!(n>=o)){var i=a("span",t);i.appendChild(s(r.hexDump(n,o))),e.appendChild(i)}}},{key:"toHexDOM",value:function(e){var t=a("span","hex");if(void 0===e&&(e=t),this.head.hexNode=t,this.head.onmouseover=function(){this.hexNode.className="hexCurrent"},this.head.onmouseout=function(){this.hexNode.className="hex"},t.asn1=this,t.onmouseover=function(){var t=!e.selected;t&&(e.selected=this.asn1,this.className="hexCurrent"),this.asn1.fakeHover(t)},t.onmouseout=function(){var t=e.selected==this.asn1;this.asn1.fakeOut(t),t&&(e.selected=null,this.className="hex")},this.toHexDOM_sub(t,"tag",this.stream,this.posStart(),this.posStart()+1),this.toHexDOM_sub(t,this.length>=0?"dlen":"ulen",this.stream,this.posStart()+1,this.posContent()),null===this.sub)t.appendChild(s(this.stream.hexDump(this.posContent(),this.posEnd())));else if(this.sub.length>0){var r=this.sub[0],n=this.sub[this.sub.length-1];this.toHexDOM_sub(t,"intro",this.stream,this.posContent(),r.posStart());for(var o=0,i=this.sub.length;o<i;++o)t.appendChild(this.sub[o].toHexDOM(e));this.toHexDOM_sub(t,"outro",this.stream,n.posEnd(),this.posEnd())}return t}},{key:"toHexString",value:function(e){return this.stream.hexDump(this.posStart(),this.posEnd(),!0)}}]),e}();c.decodeLength=function(e){var t=e.get(),r=127&t;if(r==t)return r;if(r>3)throw"Length over 24 bits not supported at position "+(e.pos-1);if(0===r)return-1;t=0;for(var n=0;n<r;++n)t=t<<8|e.get();return t},c.hasContent=function(e,t,r){if(32&e)return!0;if(e<3||e>4)return!1;var n=new u(r);if(3==e&&n.get(),n.get()>>6&1)return!1;try{var o=c.decodeLength(n);return n.pos-r.pos+o==t}catch(e){return!1}},c.decode=function(e){e instanceof u||(e=new u(e,0));var t=new u(e),r=e.get(),n=c.decodeLength(e),o=e.pos-t.pos,i=null;if(c.hasContent(r,n,e)){var a=e.pos;if(3==r&&e.get(),i=[],n>=0){for(var s=a+n;e.pos<s;)i[i.length]=c.decode(e);if(e.pos!=s)throw"Content size is not correct for container starting at offset "+a}else try{for(;;){var l=c.decode(e);if(0===l.tag)break;i[i.length]=l}n=a-e.pos}catch(e){throw"Exception while decoding undefined length content: "+e}}else e.pos+=n;return new c(t,o,n,r,i)},c.test=function(){for(var e=[{value:[39],expected:39},{value:[129,201],expected:201},{value:[131,254,220,186],expected:16702650}],t=0,r=e.length;t<r;++t){var n=new u(e[t].value,0),o=c.decodeLength(n);o!=e[t].expected&&document.write("In test["+t+"] expected "+e[t].expected+" got "+o+"\n")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.Hex={},o=void 0;n.decode=function(e){var t;if(void 0===o){var r="0123456789ABCDEF",n=" \f\n\r\t \u2028\u2029";for(o=[],t=0;t<16;++t)o[r.charAt(t)]=t;for(r=r.toLowerCase(),t=10;t<16;++t)o[r.charAt(t)]=t;for(t=0;t<n.length;++t)o[n.charAt(t)]=-1}var i=[],a=0,s=0;for(t=0;t<e.length;++t){var u=e.charAt(t);if("="==u)break;if(-1!=(u=o[u])){if(void 0===u)throw"Illegal character at offset "+t;a|=u,++s>=2?(i[i.length]=a,a=0,s=0):a<<=4}}if(s)throw"Hex encoding incomplete: 4 bits missing";return i}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=t.Base64={},o=void 0;n.decode=function(e){var t;if(void 0===o){var r="= \f\n\r\t \u2028\u2029";for(o=[],t=0;t<64;++t)o["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(t)]=t;for(t=0;t<r.length;++t)o[r.charAt(t)]=-1}var n=[],i=0,a=0;for(t=0;t<e.length;++t){var s=e.charAt(t);if("="==s)break;if(-1!=(s=o[s])){if(void 0===s)throw"Illegal character at offset "+t;i|=s,++a>=4?(n[n.length]=i>>16,n[n.length]=i>>8&255,n[n.length]=255&i,i=0,a=0):i<<=6}}switch(a){case 1:throw"Base64 encoding incomplete: at least 2 bits missing";case 2:n[n.length]=i>>10;break;case 3:n[n.length]=i>>16,n[n.length]=i>>8&255}return n},n.re=/-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,n.unarmor=function(e){var t=n.re.exec(e);if(t)if(t[1])e=t[1];else{if(!t[2])throw"RegExp out of sync";e=t[2]}return n.decode(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RSAKey=void 0;var n=r(0);Object.defineProperty(t,"RSAKey",{enumerable:!0,get:function(){return n.RSAKey}})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BigInteger=void 0;var n=r(9);Object.defineProperty(t,"BigInteger",{enumerable:!0,get:function(){return n.BigInteger}})},function(e,t,r){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.nbi=i,t.int2char=l,t.intAt=d,t.nbv=p,t.nbits=h;var o=t.BigInteger=function e(t,r,o){n(this,e),null!=t&&("number"==typeof t?this.fromNumber(t,r,o):null==r&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,r))};function i(){return new o(null)}o.prototype.am=function(e,t,r,n,o,i){for(var a=16383&t,s=t>>14;--i>=0;){var u=16383&this[e],c=this[e++]>>14,l=s*u+c*a;o=((u=a*u+((16383&l)<<14)+r[n]+o)>>28)+(l>>14)+s*c,r[n++]=268435455&u}return o},o.prototype.DB=28,o.prototype.DM=268435455,o.prototype.DV=1<<28,o.prototype.FV=Math.pow(2,52),o.prototype.F1=24,o.prototype.F2=4;var a,s,u="0123456789abcdefghijklmnopqrstuvwxyz",c=[];for(a="0".charCodeAt(0),s=0;s<=9;++s)c[a++]=s;for(a="a".charCodeAt(0),s=10;s<36;++s)c[a++]=s;for(a="A".charCodeAt(0),s=10;s<36;++s)c[a++]=s;function l(e){return u.charAt(e)}function d(e,t){var r=c[e.charCodeAt(t)];return null==r?-1:r}function p(e){var t=i();return t.fromInt(e),t}function h(e){var t,r=1;return 0!=(t=e>>>16)&&(e=t,r+=16),0!=(t=e>>8)&&(e=t,r+=8),0!=(t=e>>4)&&(e=t,r+=4),0!=(t=e>>2)&&(e=t,r+=2),0!=(t=e>>1)&&(e=t,r+=1),r}var g=t.Classic=function e(t){n(this,e),this.m=t};g.prototype.convert=function(e){return e.s<0||e.compareTo(this.m)>=0?e.mod(this.m):e},g.prototype.revert=function(e){return e},g.prototype.reduce=function(e){e.divRemTo(this.m,null,e)},g.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},g.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)};var f=t.Montgomery=function e(t){n(this,e),this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t};f.prototype.convert=function(e){var t=i();return e.abs().dlShiftTo(this.m.t,t),t.divRemTo(this.m,null,t),e.s<0&&t.compareTo(o.ZERO)>0&&this.m.subTo(t,t),t},f.prototype.revert=function(e){var t=i();return e.copyTo(t),this.reduce(t),t},f.prototype.reduce=function(e){for(;e.t<=this.mt2;)e[e.t++]=0;for(var t=0;t<this.m.t;++t){var r=32767&e[t],n=r*this.mpl+((r*this.mph+(e[t]>>15)*this.mpl&this.um)<<15)&e.DM;for(e[r=t+this.m.t]+=this.m.am(0,n,e,t,0,this.m.t);e[r]>=e.DV;)e[r]-=e.DV,e[++r]++}e.clamp(),e.drShiftTo(this.m.t,e),e.compareTo(this.m)>=0&&e.subTo(this.m,e)},f.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},f.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},o.prototype.copyTo=function(e){for(var t=this.t-1;t>=0;--t)e[t]=this[t];e.t=this.t,e.s=this.s},o.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,e>0?this[0]=e:e<-1?this[0]=e+this.DV:this.t=0},o.prototype.fromString=function(e,t){var r;if(16==t)r=4;else if(8==t)r=3;else if(256==t)r=8;else if(2==t)r=1;else if(32==t)r=5;else{if(4!=t)return void this.fromRadix(e,t);r=2}this.t=0,this.s=0;for(var n=e.length,i=!1,a=0;--n>=0;){var s=8==r?255&e[n]:d(e,n);s<0?"-"==e.charAt(n)&&(i=!0):(i=!1,0==a?this[this.t++]=s:a+r>this.DB?(this[this.t-1]|=(s&(1<<this.DB-a)-1)<<a,this[this.t++]=s>>this.DB-a):this[this.t-1]|=s<<a,(a+=r)>=this.DB&&(a-=this.DB))}8==r&&0!=(128&e[0])&&(this.s=-1,a>0&&(this[this.t-1]|=(1<<this.DB-a)-1<<a)),this.clamp(),i&&o.ZERO.subTo(this,this)},o.prototype.clamp=function(){for(var e=this.s&this.DM;this.t>0&&this[this.t-1]==e;)--this.t},o.prototype.dlShiftTo=function(e,t){var r;for(r=this.t-1;r>=0;--r)t[r+e]=this[r];for(r=e-1;r>=0;--r)t[r]=0;t.t=this.t+e,t.s=this.s},o.prototype.drShiftTo=function(e,t){for(var r=e;r<this.t;++r)t[r-e]=this[r];t.t=Math.max(this.t-e,0),t.s=this.s},o.prototype.lShiftTo=function(e,t){var r,n=e%this.DB,o=this.DB-n,i=(1<<o)-1,a=Math.floor(e/this.DB),s=this.s<<n&this.DM;for(r=this.t-1;r>=0;--r)t[r+a+1]=this[r]>>o|s,s=(this[r]&i)<<n;for(r=a-1;r>=0;--r)t[r]=0;t[a]=s,t.t=this.t+a+1,t.s=this.s,t.clamp()},o.prototype.rShiftTo=function(e,t){t.s=this.s;var r=Math.floor(e/this.DB);if(r>=this.t)t.t=0;else{var n=e%this.DB,o=this.DB-n,i=(1<<n)-1;t[0]=this[r]>>n;for(var a=r+1;a<this.t;++a)t[a-r-1]|=(this[a]&i)<<o,t[a-r]=this[a]>>n;n>0&&(t[this.t-r-1]|=(this.s&i)<<o),t.t=this.t-r,t.clamp()}},o.prototype.subTo=function(e,t){for(var r=0,n=0,o=Math.min(e.t,this.t);r<o;)n+=this[r]-e[r],t[r++]=n&this.DM,n>>=this.DB;if(e.t<this.t){for(n-=e.s;r<this.t;)n+=this[r],t[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<e.t;)n-=e[r],t[r++]=n&this.DM,n>>=this.DB;n-=e.s}t.s=n<0?-1:0,n<-1?t[r++]=this.DV+n:n>0&&(t[r++]=n),t.t=r,t.clamp()},o.prototype.multiplyTo=function(e,t){var r=this.abs(),n=e.abs(),i=r.t;for(t.t=i+n.t;--i>=0;)t[i]=0;for(i=0;i<n.t;++i)t[i+r.t]=r.am(0,n[i],t,i,0,r.t);t.s=0,t.clamp(),this.s!=e.s&&o.ZERO.subTo(t,t)},o.prototype.squareTo=function(e){for(var t=this.abs(),r=e.t=2*t.t;--r>=0;)e[r]=0;for(r=0;r<t.t-1;++r){var n=t.am(r,t[r],e,2*r,0,1);(e[r+t.t]+=t.am(r+1,2*t[r],e,2*r+1,n,t.t-r-1))>=t.DV&&(e[r+t.t]-=t.DV,e[r+t.t+1]=1)}e.t>0&&(e[e.t-1]+=t.am(r,t[r],e,2*r,0,1)),e.s=0,e.clamp()},o.prototype.divRemTo=function(e,t,r){var n=e.abs();if(!(n.t<=0)){var a=this.abs();if(a.t<n.t)return null!=t&&t.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=i());var s=i(),u=this.s,c=e.s,l=this.DB-h(n[n.t-1]);l>0?(n.lShiftTo(l,s),a.lShiftTo(l,r)):(n.copyTo(s),a.copyTo(r));var d=s.t,p=s[d-1];if(0!=p){var g=p*(1<<this.F1)+(d>1?s[d-2]>>this.F2:0),f=this.FV/g,y=(1<<this.F1)/g,v=1<<this.F2,m=r.t,w=m-d,E=null==t?i():t;for(s.dlShiftTo(w,E),r.compareTo(E)>=0&&(r[r.t++]=1,r.subTo(E,r)),o.ONE.dlShiftTo(d,E),E.subTo(s,s);s.t<d;)s[s.t++]=0;for(;--w>=0;){var I=r[--m]==p?this.DM:Math.floor(r[m]*f+(r[m-1]+v)*y);if((r[m]+=s.am(0,I,r,w,0,d))<I)for(s.dlShiftTo(w,E),r.subTo(E,r);r[m]<--I;)r.subTo(E,r)}null!=t&&(r.drShiftTo(d,t),u!=c&&o.ZERO.subTo(t,t)),r.t=d,r.clamp(),l>0&&r.rShiftTo(l,r),u<0&&o.ZERO.subTo(r,r)}}},o.prototype.invDigit=function(){if(this.t<1)return 0;var e=this[0];if(0==(1&e))return 0;var t=3&e;return(t=(t=(t=(t=t*(2-(15&e)*t)&15)*(2-(255&e)*t)&255)*(2-((65535&e)*t&65535))&65535)*(2-e*t%this.DV)%this.DV)>0?this.DV-t:-t},o.prototype.isEven=function(){return 0==(this.t>0?1&this[0]:this.s)},o.prototype.exp=function(e,t){if(e>4294967295||e<1)return o.ONE;var r=i(),n=i(),a=t.convert(this),s=h(e)-1;for(a.copyTo(r);--s>=0;)if(t.sqrTo(r,n),(e&1<<s)>0)t.mulTo(n,a,r);else{var u=r;r=n,n=u}return t.revert(r)},o.prototype.toString=function(e){if(this.s<0)return"-"+this.negate().toString(e);var t;if(16==e)t=4;else if(8==e)t=3;else if(2==e)t=1;else if(32==e)t=5;else{if(4!=e)return this.toRadix(e);t=2}var r,n=(1<<t)-1,o=!1,i="",a=this.t,s=this.DB-a*this.DB%t;if(a-- >0)for(s<this.DB&&(r=this[a]>>s)>0&&(o=!0,i=l(r));a>=0;)s<t?(r=(this[a]&(1<<s)-1)<<t-s,r|=this[--a]>>(s+=this.DB-t)):(r=this[a]>>(s-=t)&n,s<=0&&(s+=this.DB,--a)),r>0&&(o=!0),o&&(i+=l(r));return o?i:"0"},o.prototype.negate=function(){var e=i();return o.ZERO.subTo(this,e),e},o.prototype.abs=function(){return this.s<0?this.negate():this},o.prototype.compareTo=function(e){var t=this.s-e.s;if(0!=t)return t;var r=this.t;if(0!=(t=r-e.t))return this.s<0?-t:t;for(;--r>=0;)if(0!=(t=this[r]-e[r]))return t;return 0},o.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+h(this[this.t-1]^this.s&this.DM)},o.prototype.mod=function(e){var t=i();return this.abs().divRemTo(e,null,t),this.s<0&&t.compareTo(o.ZERO)>0&&e.subTo(t,t),t},o.prototype.modPowInt=function(e,t){var r;return r=e<256||t.isEven()?new g(t):new f(t),this.exp(e,r)},o.ZERO=p(0),o.ONE=p(1)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SecureRandom=void 0;var n,o,i,a=r(11);function s(){if(null==n){for(n=(0,a.prng_newstate)();i<a.rng_psize;){var e=Math.floor(65536*Math.random());o[i++]=255&e}for(n.init(o),i=0;i<o.length;++i)o[i]=0;i=0}return n.next()}null==o&&(o=new Array,i=0),(t.SecureRandom=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}).prototype.nextBytes=function(e){var t;for(t=0;t<e.length;++t)e[t]=s()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.prng_newstate=function(){return new n};var n=t.Arcfour=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.i=0,this.j=0,this.S=[]};n.prototype.init=function(e){var t,r,n;for(t=0;t<256;++t)this.S[t]=t;for(r=0,t=0;t<256;++t)r=r+this.S[t]+e[t%e.length]&255,n=this.S[t],this.S[t]=this.S[r],this.S[r]=n;this.i=0,this.j=0},n.prototype.next=function(){var e;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,e=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=e,this.S[e+this.S[this.i]&255]},t.rng_psize=256},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hex2b64=function(e){var t,r,i="";for(t=0;t+3<=e.length;t+=3)r=parseInt(e.substring(t,t+3),16),i+=n.charAt(r>>6)+n.charAt(63&r);for(t+1==e.length?(r=parseInt(e.substring(t,t+1),16),i+=n.charAt(r<<2)):t+2==e.length&&(r=parseInt(e.substring(t,t+2),16),i+=n.charAt(r>>2)+n.charAt((3&r)<<4));(3&i.length)>0;)i+=o;return i};var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o="="}]))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.encryption=e}return e.prototype.getRsaEncrypt=function(e,t){var r=new this.encryption.JSEncrypt;return r.setPublicKey(t),this.encrypted=r.encrypt(e),this.encrypted},e.prototype.getRSADecrypt=function(e,t){var r=new this.encryption.JSEncrypt;return r.setPrivateKey(t),this.unencrypted=r.decrypt(e),this.unencrypted},e}();t.RSAEncryption=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(35),o=function(){function e(e){this.env=e.env,this.production=e.production,this.envProps=new n.EnvProps(e.envProps)}return e.prototype.getEnvType=function(){return this.env},e.prototype.getProduction=function(){return this.production},e.prototype.getEnvProps=function(){return this.envProps},e}();t.Environment=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.orgId=e.orgId,this.appId=e.appId,this.appVersion=e.appVersion,this.baseUrl=e.baseUrl,this.platform=e.platform,this.secureKey=e.secureKey,this.securityVersion=e.securityVersion,this.lat=e.lat,this.lon=e.lon}return e.prototype.getOrgId=function(){return this.orgId},e.prototype.getAppId=function(){return this.appId},e.prototype.getAppVersion=function(){return this.appVersion},e.prototype.getBaseUrl=function(){return this.baseUrl},e.prototype.getPlatform=function(){return this.platform},e.prototype.getSecureKey=function(){return this.secureKey},e.prototype.getSecurityVersion=function(){return this.securityVersion},e.prototype.getLongitude=function(){return this.lon},e.prototype.getLatitude=function(){return this.lat},e}();t.EnvProps=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.doPostCall=function(e){return new Promise(function(){})},e}();t.AxiosWrapper=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.doPostCall=function(e){return new Promise(function(){})},e}();t.XmlHttpWrapper=n},function(e,t,r){e.exports=function(){return new Worker(r.p+"assets/worker.js")}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(10),a=r(0),s=r(11),u=r(1),c=r(12),l=r(8),d=function(){function e(){this.security=new a.Security,this.platwareHeaderandBody=new i.PlatwareRequestModel,this.requestUtility=new u.RequestUtility,this.dateParsing=new s.DateParsing,this.validator=new l.Validators}return e.prototype.getRegistrartionRequest=function(e){return n(this,void 0,void 0,function(){var t,r;return o(this,function(n){switch(n.label){case 0:return console.log("step 9",e),t=this.reqReqData(e),[4,this.requestUtility.fingerprint()];case 1:return r=n.sent(),this.requestProperty=new c.RequestProprty(t,r),this.setBodyInterfaceKeys(t),this.setHeaderInterfaceKeys(t),this.setRegisterHeaders(this.requestProperty.getCurrentDate,this.requestProperty.getCurrentNounce,this.requestProperty.getFingerPrint,this.requestProperty.getServiceName,this.requestProperty.getNounce,this.requestProperty.getEnvProp),this.setRegisterBody(this.requestProperty.getWindowNavigator,this.requestProperty.getCurrentDate,this.requestProperty.getFingerPrint,t,this.requestProperty.getEnvProp),[2,this.getPWRequest()]}})})},e.prototype.reqReqData=function(e){return{url:"/register",envProps:e.envProps,reqData:{interfaces:{},services:{REGISTERAPP:[{}]}}}},e.prototype.setBodyInterfaceKeys=function(e){var t=e.reqData.interfaces;for(var r in t)this.platwareHeaderandBody.pwRequest.PWBody.interfaces[r]=t[r]},e.prototype.setHeaderInterfaceKeys=function(e){var t=e.header;for(var r in t)this.platwareHeaderandBody.pwRequest.PWHeader[r]=t[r]},e.prototype.setRegisterHeaders=function(e,t,r,n,o,i){var a=(t.toString()+i.secureKey).substring(0,32),s=i.orgId+"~"+i.appId+"~"+r+":app:"+t,u=this.security.aesEncryption.getEncryption(s,a);this.platwareHeaderandBody.pwRequest.PWHeader.txnkey="",this.platwareHeaderandBody.pwRequest.PWHeader.authorization="Basic "+u;var c=this.security.aesEncryption.getHashValue("Basic "+u,i.secureKey);this.platwareHeaderandBody.pwRequest.PWHeader.hash=c,this.platwareHeaderandBody.pwRequest.PWHeader.requestid=this.requestUtility.getRequestid("--",r,e,i),this.platwareHeaderandBody.pwRequest.PWHeader.nounce=o,this.setHeaderKeys(n,r,i,"PR_PR")},e.prototype.setRegisterBody=function(e,t,r,n,o){this.setInterface(t,e,r,o),this.platwareHeaderandBody.pwRequest.PWBody.services=n.reqData.services},e.prototype.setHeaderKeys=function(e,t,r,i){return n(this,void 0,void 0,function(){return o(this,function(n){return this.platwareHeaderandBody.pwRequest.PWHeader.clientid=this.requestUtility.getClientid(r),this.platwareHeaderandBody.pwRequest.PWHeader.servicename=e,this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=t,this.platwareHeaderandBody.pwRequest.PWHeader["security-version"]="2",this.platwareHeaderandBody.pwRequest.PWHeader.requesttype=i,[2]})})},e.prototype.setInterface=function(e,t,r,n){this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_TIMESTAMP=this.dateParsing.dateFormat("device",e),this.platwareHeaderandBody.pwRequest.PWBody.interfaces.fingerprint=r,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.APPLICATION_VERSION=n.appVersion,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_CLIENT_VERSION="2.5.6",this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MAKE=t.platform,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MODEL=t.vendor?t.vendor:t.appCodeName,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LATITUDE=n.lat,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LONGITUDE=n.lon,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_VERSION=""},e.prototype.getPWRequest=function(){return n(this,void 0,void 0,function(){var e;return o(this,function(t){switch(t.label){case 0:return[4,this.validator.networkValidators.getDeviceId()];case 1:return e=t.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=e,[2,this.platwareHeaderandBody.pwRequest]}})})},e}();t.RegistrationService=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.getHexString=function(e){for(var t=[],r=0;r<e.length;r++)t.push(e.charCodeAt(r));return this.toHexString(t)},e.prototype.toHexString=function(e){return Array.from(e,this.byte).join("")},e.prototype.byte=function(e){return("0"+(255&e).toString(16)).slice(-2)},e}();t.HexUtility=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(9),o=r(6),i=r(14),a=function(){function e(){}return e.prototype.isValidArguments=function(e,t){return void 0===t&&(t=!1),t?this.isNumberofArguments(e)&&this.isBodyValid(e)&&this.isHeaderValid(e):this.isNumberofArguments(e)&&this.isBodyValid(e)&&this.isCallbackValid(e)&&this.isHeaderValid(e)},e.prototype.isNumberofArguments=function(e){try{var t=e.length;if(t>1&&t<7)return!0;throw new i.CustomError("PW001",{status:!1,message:"Execute Api requires atleast two and atmost six arguments"})}catch(e){throw e}},e.prototype.isCallbackValid=function(e){var t="function"==typeof e[3],r=1===e[3].length;if(!0===t&&!0===r)return!0;throw n.ErrorHandler.getErrors(o.ErrorConstant.BODYPARAM)},e.prototype.isBodyValid=function(e){try{if(Object.keys(e[1]).length<1)throw n.ErrorHandler.getErrors(o.ErrorConstant.BODYPARAM);for(var t in e[1]){if(!Array.isArray(e[1][t]))throw n.ErrorHandler.getErrors(o.ErrorConstant.BODYPARAM);for(var r in e[1][t]){if("object"==typeof e[1][t][r])return!0;throw n.ErrorHandler.getErrors(o.ErrorConstant.BODYPARAM)}}}catch(e){throw e}},e.prototype.isHeaderValid=function(e){if(!(void 0!==e[2]&&Object.keys(e[2]).length>0))return!0;for(var t in e[2])try{if("string"==typeof e[2][t])return!0;throw n.ErrorHandler.getErrors(o.ErrorConstant.HEADERPARAM)}catch(e){throw e}},e}();t.ArgumentsValidation=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.NETWORKOFFLINE="Internet Connection appears to be offline, Please check your Internet connection.",e.BODYNOTVALID="Request parameters(Body) are not valid",e.HEADERNOTVALID="Request parameters(Headers) are not valid",e.GUUIDERROR="Your session has been killed",e.REQUESTNOTVALID="Request parameters are not valid",e.MAXSERVICE="We can process maximum of five services at once",e.DECRYPTION="Unable to decript data! Hint. Some data has been modified.",e.PARSINGRESPONSE="Unable to parse response data",e.SERVERCONNECTION="Connection Error! We are unable to reach to the server",e.REGISTRATION="Handshake fail! Please connect to the server team.",e.DUPLICATESESSION="It seems like you are already logged in some other device. Kill you existing session and login again.",e.DEFAULTMESSAGE="Some technical error occured! Please check you log and come back to us.",e.CALLBACKINVALID="Call Back is not a function",e}();t.ErrorMessage=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.parameterValidation=function(e){return"string"==typeof e.url&&"object"==typeof e.header&&"object"==typeof e.body},e}();t.HttpParameterValidation=n},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(45),a=function(){function e(){}return e.prototype.isNetworkAvailable=function(){return!!navigator.onLine},e.prototype.getPosition=function(){new Promise(function(e){setTimeout(function(){e({latitude:"",longitude:""})},0)});return new Promise(function(e,t){navigator.geolocation.getCurrentPosition(function(t){e(t.coords)},function(t){e({latitude:"",longitude:""})})})},e.prototype.getDeviceId=function(){return n(this,void 0,void 0,function(){var e=this;return o(this,function(t){return[2,new Promise(function(t,r){return n(e,void 0,void 0,function(){var e=this;return o(this,function(r){return setTimeout(function(){return n(e,void 0,void 0,function(){var e,r,n;return o(this,function(o){switch(o.label){case 0:return[4,i.getPromise()];case 1:return e=o.sent(),r=e.map(function(e){return e.value}),n=i.x64hash128(r.join(""),31),t(n),[2]}})})},500),[2]})})})]})})},e.prototype.getNavigator=function(){var e={};for(var t in navigator)e[t]=navigator[t];return e},e}();t.NetworkValidation=a},function(e,t,r){var n,o;!function(i,a,s){"use strict";"undefined"!=typeof window&&r(46)?void 0===(o="function"==typeof(n=s)?n.call(t,r,t,e):n)||(e.exports=o):e.exports?e.exports=s():a.exports?a.exports=s():a.Fingerprint2=s()}(0,this,function(){"use strict";void 0===Array.isArray&&(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)});var e=function(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var r=[0,0,0,0];return r[3]+=e[3]+t[3],r[2]+=r[3]>>>16,r[3]&=65535,r[2]+=e[2]+t[2],r[1]+=r[2]>>>16,r[2]&=65535,r[1]+=e[1]+t[1],r[0]+=r[1]>>>16,r[1]&=65535,r[0]+=e[0]+t[0],r[0]&=65535,[r[0]<<16|r[1],r[2]<<16|r[3]]},t=function(e,t){e=[e[0]>>>16,65535&e[0],e[1]>>>16,65535&e[1]],t=[t[0]>>>16,65535&t[0],t[1]>>>16,65535&t[1]];var r=[0,0,0,0];return r[3]+=e[3]*t[3],r[2]+=r[3]>>>16,r[3]&=65535,r[2]+=e[2]*t[3],r[1]+=r[2]>>>16,r[2]&=65535,r[2]+=e[3]*t[2],r[1]+=r[2]>>>16,r[2]&=65535,r[1]+=e[1]*t[3],r[0]+=r[1]>>>16,r[1]&=65535,r[1]+=e[2]*t[2],r[0]+=r[1]>>>16,r[1]&=65535,r[1]+=e[3]*t[1],r[0]+=r[1]>>>16,r[1]&=65535,r[0]+=e[0]*t[3]+e[1]*t[2]+e[2]*t[1]+e[3]*t[0],r[0]&=65535,[r[0]<<16|r[1],r[2]<<16|r[3]]},r=function(e,t){return 32===(t%=64)?[e[1],e[0]]:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t|e[0]>>>32-t]:(t-=32,[e[1]<<t|e[0]>>>32-t,e[0]<<t|e[1]>>>32-t])},n=function(e,t){return 0===(t%=64)?e:t<32?[e[0]<<t|e[1]>>>32-t,e[1]<<t]:[e[1]<<t-32,0]},o=function(e,t){return[e[0]^t[0],e[1]^t[1]]},i=function(e){return e=o(e,[0,e[0]>>>1]),e=t(e,[4283543511,3981806797]),e=o(e,[0,e[0]>>>1]),e=t(e,[3301882366,444984403]),e=o(e,[0,e[0]>>>1])},a=function(a,s){s=s||0;for(var u=(a=a||"").length%16,c=a.length-u,l=[0,s],d=[0,s],p=[0,0],h=[0,0],g=[2277735313,289559509],f=[1291169091,658871167],y=0;y<c;y+=16)p=[255&a.charCodeAt(y+4)|(255&a.charCodeAt(y+5))<<8|(255&a.charCodeAt(y+6))<<16|(255&a.charCodeAt(y+7))<<24,255&a.charCodeAt(y)|(255&a.charCodeAt(y+1))<<8|(255&a.charCodeAt(y+2))<<16|(255&a.charCodeAt(y+3))<<24],h=[255&a.charCodeAt(y+12)|(255&a.charCodeAt(y+13))<<8|(255&a.charCodeAt(y+14))<<16|(255&a.charCodeAt(y+15))<<24,255&a.charCodeAt(y+8)|(255&a.charCodeAt(y+9))<<8|(255&a.charCodeAt(y+10))<<16|(255&a.charCodeAt(y+11))<<24],p=t(p,g),p=r(p,31),p=t(p,f),l=o(l,p),l=r(l,27),l=e(l,d),l=e(t(l,[0,5]),[0,1390208809]),h=t(h,f),h=r(h,33),h=t(h,g),d=o(d,h),d=r(d,31),d=e(d,l),d=e(t(d,[0,5]),[0,944331445]);switch(p=[0,0],h=[0,0],u){case 15:h=o(h,n([0,a.charCodeAt(y+14)],48));case 14:h=o(h,n([0,a.charCodeAt(y+13)],40));case 13:h=o(h,n([0,a.charCodeAt(y+12)],32));case 12:h=o(h,n([0,a.charCodeAt(y+11)],24));case 11:h=o(h,n([0,a.charCodeAt(y+10)],16));case 10:h=o(h,n([0,a.charCodeAt(y+9)],8));case 9:h=o(h,[0,a.charCodeAt(y+8)]),h=t(h,f),h=r(h,33),h=t(h,g),d=o(d,h);case 8:p=o(p,n([0,a.charCodeAt(y+7)],56));case 7:p=o(p,n([0,a.charCodeAt(y+6)],48));case 6:p=o(p,n([0,a.charCodeAt(y+5)],40));case 5:p=o(p,n([0,a.charCodeAt(y+4)],32));case 4:p=o(p,n([0,a.charCodeAt(y+3)],24));case 3:p=o(p,n([0,a.charCodeAt(y+2)],16));case 2:p=o(p,n([0,a.charCodeAt(y+1)],8));case 1:p=o(p,[0,a.charCodeAt(y)]),p=t(p,g),p=r(p,31),p=t(p,f),l=o(l,p)}return l=o(l,[0,a.length]),d=o(d,[0,a.length]),l=e(l,d),d=e(d,l),l=i(l),d=i(d),l=e(l,d),d=e(d,l),("00000000"+(l[0]>>>0).toString(16)).slice(-8)+("00000000"+(l[1]>>>0).toString(16)).slice(-8)+("00000000"+(d[0]>>>0).toString(16)).slice(-8)+("00000000"+(d[1]>>>0).toString(16)).slice(-8)},s={preprocessor:null,audio:{timeout:1e3,excludeIOS11:!0},fonts:{swfContainerId:"fingerprintjs2",swfPath:"flash/compiled/FontList.swf",userDefinedFonts:[],extendedJsFonts:!1},screen:{detectScreenOrientation:!0},plugins:{sortPluginsFor:[/palemoon/i],excludeIE:!1},extraComponents:[],excludes:{enumerateDevices:!0,pixelRatio:!0,doNotTrack:!0,fontsFlash:!0},NOT_AVAILABLE:"not available",ERROR:"error",EXCLUDED:"excluded"},u=function(e,t){if(Array.prototype.forEach&&e.forEach===Array.prototype.forEach)e.forEach(t);else if(e.length===+e.length)for(var r=0,n=e.length;r<n;r++)t(e[r],r,e);else for(var o in e)e.hasOwnProperty(o)&&t(e[o],o,e)},c=function(e,t){var r=[];return null==e?r:Array.prototype.map&&e.map===Array.prototype.map?e.map(t):(u(e,function(e,n,o){r.push(t(e,n,o))}),r)},l=function(){return navigator.mediaDevices&&navigator.mediaDevices.enumerateDevices},d=function(e){var t=[window.screen.width,window.screen.height];return e.screen.detectScreenOrientation&&t.sort().reverse(),t},p=function(e){if(window.screen.availWidth&&window.screen.availHeight){var t=[window.screen.availHeight,window.screen.availWidth];return e.screen.detectScreenOrientation&&t.sort().reverse(),t}return e.NOT_AVAILABLE},h=function(e){if(null==navigator.plugins)return e.NOT_AVAILABLE;for(var t=[],r=0,n=navigator.plugins.length;r<n;r++)navigator.plugins[r]&&t.push(navigator.plugins[r]);return f(e)&&(t=t.sort(function(e,t){return e.name>t.name?1:e.name<t.name?-1:0})),c(t,function(e){var t=c(e,function(e){return[e.type,e.suffixes]});return[e.name,e.description,t]})},g=function(e){var t=[];if(Object.getOwnPropertyDescriptor&&Object.getOwnPropertyDescriptor(window,"ActiveXObject")||"ActiveXObject"in window){t=c(["AcroPDF.PDF","Adodb.Stream","AgControl.AgControl","DevalVRXCtrl.DevalVRXCtrl.1","MacromediaFlashPaper.MacromediaFlashPaper","Msxml2.DOMDocument","Msxml2.XMLHTTP","PDF.PdfCtrl","QuickTime.QuickTime","QuickTimeCheckObject.QuickTimeCheck.1","RealPlayer","RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)","RealVideo.RealVideo(tm) ActiveX Control (32-bit)","Scripting.Dictionary","SWCtl.SWCtl","Shell.UIHelper","ShockwaveFlash.ShockwaveFlash","Skype.Detection","TDCCtl.TDCCtl","WMPlayer.OCX","rmocx.RealPlayer G2 Control","rmocx.RealPlayer G2 Control.1"],function(t){try{return new window.ActiveXObject(t),t}catch(t){return e.ERROR}})}else t.push(e.NOT_AVAILABLE);return navigator.plugins&&(t=t.concat(h(e))),t},f=function(e){for(var t=!1,r=0,n=e.plugins.sortPluginsFor.length;r<n;r++){var o=e.plugins.sortPluginsFor[r];if(navigator.userAgent.match(o)){t=!0;break}}return t},y=function(e){try{return!!window.sessionStorage}catch(t){return e.ERROR}},v=function(e){try{return!!window.localStorage}catch(t){return e.ERROR}},m=function(e){try{return!!window.indexedDB}catch(t){return e.ERROR}},w=function(e){return navigator.hardwareConcurrency?navigator.hardwareConcurrency:e.NOT_AVAILABLE},E=function(e){return navigator.cpuClass||e.NOT_AVAILABLE},I=function(e){return navigator.platform?navigator.platform:e.NOT_AVAILABLE},P=function(e){return navigator.doNotTrack?navigator.doNotTrack:navigator.msDoNotTrack?navigator.msDoNotTrack:window.doNotTrack?window.doNotTrack:e.NOT_AVAILABLE},b=function(){var e,t=0;void 0!==navigator.maxTouchPoints?t=navigator.maxTouchPoints:void 0!==navigator.msMaxTouchPoints&&(t=navigator.msMaxTouchPoints);try{document.createEvent("TouchEvent"),e=!0}catch(t){e=!1}return[t,e,"ontouchstart"in window]},S=function(e){var t=[],r=document.createElement("canvas");r.width=2e3,r.height=200,r.style.display="inline";var n=r.getContext("2d");return n.rect(0,0,10,10),n.rect(2,2,6,6),t.push("canvas winding:"+(!1===n.isPointInPath(5,5,"evenodd")?"yes":"no")),n.textBaseline="alphabetic",n.fillStyle="#f60",n.fillRect(125,1,62,20),n.fillStyle="#069",e.dontUseFakeFontInCanvas?n.font="11pt Arial":n.font="11pt no-real-font-123",n.fillText("Cwm fjordbank glyphs vext quiz, 😃",2,15),n.fillStyle="rgba(102, 204, 0, 0.2)",n.font="18pt Arial",n.fillText("Cwm fjordbank glyphs vext quiz, 😃",4,45),n.globalCompositeOperation="multiply",n.fillStyle="rgb(255,0,255)",n.beginPath(),n.arc(50,50,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(0,255,255)",n.beginPath(),n.arc(100,50,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(255,255,0)",n.beginPath(),n.arc(75,100,50,0,2*Math.PI,!0),n.closePath(),n.fill(),n.fillStyle="rgb(255,0,255)",n.arc(75,75,75,0,2*Math.PI,!0),n.arc(75,75,25,0,2*Math.PI,!0),n.fill("evenodd"),r.toDataURL&&t.push("canvas fp:"+r.toDataURL()),t},A=function(){var e,t=function(t){return e.clearColor(0,0,0,1),e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),"["+t[0]+", "+t[1]+"]"};if(!(e=L()))return null;var r=[],n=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,n);var o=new Float32Array([-.2,-.9,0,.4,-.26,0,0,.732134444,0]);e.bufferData(e.ARRAY_BUFFER,o,e.STATIC_DRAW),n.itemSize=3,n.numItems=3;var i=e.createProgram(),a=e.createShader(e.VERTEX_SHADER);e.shaderSource(a,"attribute vec2 attrVertex;varying vec2 varyinTexCoordinate;uniform vec2 uniformOffset;void main(){varyinTexCoordinate=attrVertex+uniformOffset;gl_Position=vec4(attrVertex,0,1);}"),e.compileShader(a);var s=e.createShader(e.FRAGMENT_SHADER);e.shaderSource(s,"precision mediump float;varying vec2 varyinTexCoordinate;void main() {gl_FragColor=vec4(varyinTexCoordinate,0,1);}"),e.compileShader(s),e.attachShader(i,a),e.attachShader(i,s),e.linkProgram(i),e.useProgram(i),i.vertexPosAttrib=e.getAttribLocation(i,"attrVertex"),i.offsetUniform=e.getUniformLocation(i,"uniformOffset"),e.enableVertexAttribArray(i.vertexPosArray),e.vertexAttribPointer(i.vertexPosAttrib,n.itemSize,e.FLOAT,!1,0,0),e.uniform2f(i.offsetUniform,1,1),e.drawArrays(e.TRIANGLE_STRIP,0,n.numItems);try{r.push(e.canvas.toDataURL())}catch(e){}r.push("extensions:"+(e.getSupportedExtensions()||[]).join(";")),r.push("webgl aliased line width range:"+t(e.getParameter(e.ALIASED_LINE_WIDTH_RANGE))),r.push("webgl aliased point size range:"+t(e.getParameter(e.ALIASED_POINT_SIZE_RANGE))),r.push("webgl alpha bits:"+e.getParameter(e.ALPHA_BITS)),r.push("webgl antialiasing:"+(e.getContextAttributes().antialias?"yes":"no")),r.push("webgl blue bits:"+e.getParameter(e.BLUE_BITS)),r.push("webgl depth bits:"+e.getParameter(e.DEPTH_BITS)),r.push("webgl green bits:"+e.getParameter(e.GREEN_BITS)),r.push("webgl max anisotropy:"+function(e){var t=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic");if(t){var r=e.getParameter(t.MAX_TEXTURE_MAX_ANISOTROPY_EXT);return 0===r&&(r=2),r}return null}(e)),r.push("webgl max combined texture image units:"+e.getParameter(e.MAX_COMBINED_TEXTURE_IMAGE_UNITS)),r.push("webgl max cube map texture size:"+e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE)),r.push("webgl max fragment uniform vectors:"+e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS)),r.push("webgl max render buffer size:"+e.getParameter(e.MAX_RENDERBUFFER_SIZE)),r.push("webgl max texture image units:"+e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)),r.push("webgl max texture size:"+e.getParameter(e.MAX_TEXTURE_SIZE)),r.push("webgl max varying vectors:"+e.getParameter(e.MAX_VARYING_VECTORS)),r.push("webgl max vertex attribs:"+e.getParameter(e.MAX_VERTEX_ATTRIBS)),r.push("webgl max vertex texture image units:"+e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS)),r.push("webgl max vertex uniform vectors:"+e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS)),r.push("webgl max viewport dims:"+t(e.getParameter(e.MAX_VIEWPORT_DIMS))),r.push("webgl red bits:"+e.getParameter(e.RED_BITS)),r.push("webgl renderer:"+e.getParameter(e.RENDERER)),r.push("webgl shading language version:"+e.getParameter(e.SHADING_LANGUAGE_VERSION)),r.push("webgl stencil bits:"+e.getParameter(e.STENCIL_BITS)),r.push("webgl vendor:"+e.getParameter(e.VENDOR)),r.push("webgl version:"+e.getParameter(e.VERSION));try{var c=e.getExtension("WEBGL_debug_renderer_info");c&&(r.push("webgl unmasked vendor:"+e.getParameter(c.UNMASKED_VENDOR_WEBGL)),r.push("webgl unmasked renderer:"+e.getParameter(c.UNMASKED_RENDERER_WEBGL)))}catch(e){}return e.getShaderPrecisionFormat?(u(["FLOAT","INT"],function(t){u(["VERTEX","FRAGMENT"],function(n){u(["HIGH","MEDIUM","LOW"],function(o){u(["precision","rangeMin","rangeMax"],function(i){var a=e.getShaderPrecisionFormat(e[n+"_SHADER"],e[o+"_"+t])[i];"precision"!==i&&(i="precision "+i);var s=["webgl ",n.toLowerCase()," shader ",o.toLowerCase()," ",t.toLowerCase()," ",i,":",a].join("");r.push(s)})})})}),N(e),r):(N(e),r)},R=function(){try{var e=L(),t=e.getExtension("WEBGL_debug_renderer_info"),r=e.getParameter(t.UNMASKED_VENDOR_WEBGL)+"~"+e.getParameter(t.UNMASKED_RENDERER_WEBGL);return N(e),r}catch(e){return null}},C=function(){var e=document.createElement("div");e.innerHTML="&nbsp;",e.className="adsbox";var t=!1;try{document.body.appendChild(e),t=0===document.getElementsByClassName("adsbox")[0].offsetHeight,document.body.removeChild(e)}catch(e){t=!1}return t},T=function(){if(void 0!==navigator.languages)try{if(navigator.languages[0].substr(0,2)!==navigator.language.substr(0,2))return!0}catch(e){return!0}return!1},O=function(){return window.screen.width<window.screen.availWidth||window.screen.height<window.screen.availHeight},B=function(){var e,t=navigator.userAgent.toLowerCase(),r=navigator.oscpu,n=navigator.platform.toLowerCase();if(e=t.indexOf("windows phone")>=0?"Windows Phone":t.indexOf("windows")>=0||t.indexOf("win16")>=0||t.indexOf("win32")>=0||t.indexOf("win64")>=0||t.indexOf("win95")>=0||t.indexOf("win98")>=0||t.indexOf("winnt")>=0||t.indexOf("wow64")>=0?"Windows":t.indexOf("android")>=0?"Android":t.indexOf("linux")>=0||t.indexOf("cros")>=0||t.indexOf("x11")>=0?"Linux":t.indexOf("iphone")>=0||t.indexOf("ipad")>=0||t.indexOf("ipod")>=0||t.indexOf("crios")>=0||t.indexOf("fxios")>=0?"iOS":t.indexOf("macintosh")>=0||t.indexOf("mac_powerpc)")>=0?"Mac":"Other",("ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0)&&"Windows"!==e&&"Windows Phone"!==e&&"Android"!==e&&"iOS"!==e&&"Other"!==e&&-1===t.indexOf("cros"))return!0;if(void 0!==r){if((r=r.toLowerCase()).indexOf("win")>=0&&"Windows"!==e&&"Windows Phone"!==e)return!0;if(r.indexOf("linux")>=0&&"Linux"!==e&&"Android"!==e)return!0;if(r.indexOf("mac")>=0&&"Mac"!==e&&"iOS"!==e)return!0;if((-1===r.indexOf("win")&&-1===r.indexOf("linux")&&-1===r.indexOf("mac"))!=("Other"===e))return!0}return n.indexOf("win")>=0&&"Windows"!==e&&"Windows Phone"!==e||((n.indexOf("linux")>=0||n.indexOf("android")>=0||n.indexOf("pike")>=0)&&"Linux"!==e&&"Android"!==e||((n.indexOf("mac")>=0||n.indexOf("ipad")>=0||n.indexOf("ipod")>=0||n.indexOf("iphone")>=0)&&"Mac"!==e&&"iOS"!==e||!(n.indexOf("arm")>=0&&"Windows Phone"===e)&&(!(n.indexOf("pike")>=0&&t.indexOf("opera mini")>=0)&&((n.indexOf("win")<0&&n.indexOf("linux")<0&&n.indexOf("mac")<0&&n.indexOf("iphone")<0&&n.indexOf("ipad")<0&&n.indexOf("ipod")<0)!==("Other"===e)||void 0===navigator.plugins&&"Windows"!==e&&"Windows Phone"!==e))))},_=function(){var e,t=navigator.userAgent.toLowerCase(),r=navigator.productSub;if(t.indexOf("edge/")>=0||t.indexOf("iemobile/")>=0)return!1;if(t.indexOf("opera mini")>=0)return!1;if(("Chrome"===(e=t.indexOf("firefox/")>=0?"Firefox":t.indexOf("opera/")>=0||t.indexOf(" opr/")>=0?"Opera":t.indexOf("chrome/")>=0?"Chrome":t.indexOf("safari/")>=0?t.indexOf("android 1.")>=0||t.indexOf("android 2.")>=0||t.indexOf("android 3.")>=0||t.indexOf("android 4.")>=0?"AOSP":"Safari":t.indexOf("trident/")>=0?"Internet Explorer":"Other")||"Safari"===e||"Opera"===e)&&"20030107"!==r)return!0;var n,o=eval.toString().length;if(37===o&&"Safari"!==e&&"Firefox"!==e&&"Other"!==e)return!0;if(39===o&&"Internet Explorer"!==e&&"Other"!==e)return!0;if(33===o&&"Chrome"!==e&&"AOSP"!==e&&"Opera"!==e&&"Other"!==e)return!0;try{throw"a"}catch(e){try{e.toSource(),n=!0}catch(e){n=!1}}return n&&"Firefox"!==e&&"Other"!==e},D=function(){var e=document.createElement("canvas");return!(!e.getContext||!e.getContext("2d"))},k=function(){if(!D())return!1;var e=L(),t=!!window.WebGLRenderingContext&&!!e;return N(e),t},x=function(){return"Microsoft Internet Explorer"===navigator.appName||!("Netscape"!==navigator.appName||!/Trident/.test(navigator.userAgent))},H=function(){return void 0!==window.swfobject},M=function(){return window.swfobject.hasFlashPlayerVersion("9.0.0")},q=function(e,t){window.___fp_swf_loaded=function(t){e(t)};var r=t.fonts.swfContainerId;!function(e){var t=document.createElement("div");t.setAttribute("id",e.fonts.swfContainerId),document.body.appendChild(t)}();var n={onReady:"___fp_swf_loaded"};window.swfobject.embedSWF(t.fonts.swfPath,r,"1","1","9.0.0",!1,n,{allowScriptAccess:"always",menu:"false"},{})},L=function(){var e=document.createElement("canvas"),t=null;try{t=e.getContext("webgl")||e.getContext("experimental-webgl")}catch(e){}return t||(t=null),t},N=function(e){var t=e.getExtension("WEBGL_lose_context");null!=t&&t.loseContext()},U=[{key:"userAgent",getData:function(e){e(navigator.userAgent)}},{key:"webdriver",getData:function(e,t){e(null==navigator.webdriver?t.NOT_AVAILABLE:navigator.webdriver)}},{key:"language",getData:function(e,t){e(navigator.language||navigator.userLanguage||navigator.browserLanguage||navigator.systemLanguage||t.NOT_AVAILABLE)}},{key:"colorDepth",getData:function(e,t){e(window.screen.colorDepth||t.NOT_AVAILABLE)}},{key:"deviceMemory",getData:function(e,t){e(navigator.deviceMemory||t.NOT_AVAILABLE)}},{key:"pixelRatio",getData:function(e,t){e(window.devicePixelRatio||t.NOT_AVAILABLE)}},{key:"hardwareConcurrency",getData:function(e,t){e(w(t))}},{key:"screenResolution",getData:function(e,t){e(d(t))}},{key:"availableScreenResolution",getData:function(e,t){e(p(t))}},{key:"timezoneOffset",getData:function(e){e((new Date).getTimezoneOffset())}},{key:"timezone",getData:function(e,t){window.Intl&&window.Intl.DateTimeFormat?e((new window.Intl.DateTimeFormat).resolvedOptions().timeZone):e(t.NOT_AVAILABLE)}},{key:"sessionStorage",getData:function(e,t){e(y(t))}},{key:"localStorage",getData:function(e,t){e(v(t))}},{key:"indexedDb",getData:function(e,t){e(m(t))}},{key:"addBehavior",getData:function(e){e(!(!document.body||!document.body.addBehavior))}},{key:"openDatabase",getData:function(e){e(!!window.openDatabase)}},{key:"cpuClass",getData:function(e,t){e(E(t))}},{key:"platform",getData:function(e,t){e(I(t))}},{key:"doNotTrack",getData:function(e,t){e(P(t))}},{key:"plugins",getData:function(e,t){x()?t.plugins.excludeIE?e(t.EXCLUDED):e(g(t)):e(h(t))}},{key:"canvas",getData:function(e,t){D()?e(S(t)):e(t.NOT_AVAILABLE)}},{key:"webgl",getData:function(e,t){k()?e(A()):e(t.NOT_AVAILABLE)}},{key:"webglVendorAndRenderer",getData:function(e){k()?e(R()):e()}},{key:"adBlock",getData:function(e){e(C())}},{key:"hasLiedLanguages",getData:function(e){e(T())}},{key:"hasLiedResolution",getData:function(e){e(O())}},{key:"hasLiedOs",getData:function(e){e(B())}},{key:"hasLiedBrowser",getData:function(e){e(_())}},{key:"touchSupport",getData:function(e){e(b())}},{key:"fonts",getData:function(e,t){var r=["monospace","sans-serif","serif"],n=["Andale Mono","Arial","Arial Black","Arial Hebrew","Arial MT","Arial Narrow","Arial Rounded MT Bold","Arial Unicode MS","Bitstream Vera Sans Mono","Book Antiqua","Bookman Old Style","Calibri","Cambria","Cambria Math","Century","Century Gothic","Century Schoolbook","Comic Sans","Comic Sans MS","Consolas","Courier","Courier New","Geneva","Georgia","Helvetica","Helvetica Neue","Impact","Lucida Bright","Lucida Calligraphy","Lucida Console","Lucida Fax","LUCIDA GRANDE","Lucida Handwriting","Lucida Sans","Lucida Sans Typewriter","Lucida Sans Unicode","Microsoft Sans Serif","Monaco","Monotype Corsiva","MS Gothic","MS Outlook","MS PGothic","MS Reference Sans Serif","MS Sans Serif","MS Serif","MYRIAD","MYRIAD PRO","Palatino","Palatino Linotype","Segoe Print","Segoe Script","Segoe UI","Segoe UI Light","Segoe UI Semibold","Segoe UI Symbol","Tahoma","Times","Times New Roman","Times New Roman PS","Trebuchet MS","Verdana","Wingdings","Wingdings 2","Wingdings 3"];if(t.fonts.extendedJsFonts){n=n.concat(["Abadi MT Condensed Light","Academy Engraved LET","ADOBE CASLON PRO","Adobe Garamond","ADOBE GARAMOND PRO","Agency FB","Aharoni","Albertus Extra Bold","Albertus Medium","Algerian","Amazone BT","American Typewriter","American Typewriter Condensed","AmerType Md BT","Andalus","Angsana New","AngsanaUPC","Antique Olive","Aparajita","Apple Chancery","Apple Color Emoji","Apple SD Gothic Neo","Arabic Typesetting","ARCHER","ARNO PRO","Arrus BT","Aurora Cn BT","AvantGarde Bk BT","AvantGarde Md BT","AVENIR","Ayuthaya","Bandy","Bangla Sangam MN","Bank Gothic","BankGothic Md BT","Baskerville","Baskerville Old Face","Batang","BatangChe","Bauer Bodoni","Bauhaus 93","Bazooka","Bell MT","Bembo","Benguiat Bk BT","Berlin Sans FB","Berlin Sans FB Demi","Bernard MT Condensed","BernhardFashion BT","BernhardMod BT","Big Caslon","BinnerD","Blackadder ITC","BlairMdITC TT","Bodoni 72","Bodoni 72 Oldstyle","Bodoni 72 Smallcaps","Bodoni MT","Bodoni MT Black","Bodoni MT Condensed","Bodoni MT Poster Compressed","Bookshelf Symbol 7","Boulder","Bradley Hand","Bradley Hand ITC","Bremen Bd BT","Britannic Bold","Broadway","Browallia New","BrowalliaUPC","Brush Script MT","Californian FB","Calisto MT","Calligrapher","Candara","CaslonOpnface BT","Castellar","Centaur","Cezanne","CG Omega","CG Times","Chalkboard","Chalkboard SE","Chalkduster","Charlesworth","Charter Bd BT","Charter BT","Chaucer","ChelthmITC Bk BT","Chiller","Clarendon","Clarendon Condensed","CloisterBlack BT","Cochin","Colonna MT","Constantia","Cooper Black","Copperplate","Copperplate Gothic","Copperplate Gothic Bold","Copperplate Gothic Light","CopperplGoth Bd BT","Corbel","Cordia New","CordiaUPC","Cornerstone","Coronet","Cuckoo","Curlz MT","DaunPenh","Dauphin","David","DB LCD Temp","DELICIOUS","Denmark","DFKai-SB","Didot","DilleniaUPC","DIN","DokChampa","Dotum","DotumChe","Ebrima","Edwardian Script ITC","Elephant","English 111 Vivace BT","Engravers MT","EngraversGothic BT","Eras Bold ITC","Eras Demi ITC","Eras Light ITC","Eras Medium ITC","EucrosiaUPC","Euphemia","Euphemia UCAS","EUROSTILE","Exotc350 Bd BT","FangSong","Felix Titling","Fixedsys","FONTIN","Footlight MT Light","Forte","FrankRuehl","Fransiscan","Freefrm721 Blk BT","FreesiaUPC","Freestyle Script","French Script MT","FrnkGothITC Bk BT","Fruitger","FRUTIGER","Futura","Futura Bk BT","Futura Lt BT","Futura Md BT","Futura ZBlk BT","FuturaBlack BT","Gabriola","Galliard BT","Gautami","Geeza Pro","Geometr231 BT","Geometr231 Hv BT","Geometr231 Lt BT","GeoSlab 703 Lt BT","GeoSlab 703 XBd BT","Gigi","Gill Sans","Gill Sans MT","Gill Sans MT Condensed","Gill Sans MT Ext Condensed Bold","Gill Sans Ultra Bold","Gill Sans Ultra Bold Condensed","Gisha","Gloucester MT Extra Condensed","GOTHAM","GOTHAM BOLD","Goudy Old Style","Goudy Stout","GoudyHandtooled BT","GoudyOLSt BT","Gujarati Sangam MN","Gulim","GulimChe","Gungsuh","GungsuhChe","Gurmukhi MN","Haettenschweiler","Harlow Solid Italic","Harrington","Heather","Heiti SC","Heiti TC","HELV","Herald","High Tower Text","Hiragino Kaku Gothic ProN","Hiragino Mincho ProN","Hoefler Text","Humanst 521 Cn BT","Humanst521 BT","Humanst521 Lt BT","Imprint MT Shadow","Incised901 Bd BT","Incised901 BT","Incised901 Lt BT","INCONSOLATA","Informal Roman","Informal011 BT","INTERSTATE","IrisUPC","Iskoola Pota","JasmineUPC","Jazz LET","Jenson","Jester","Jokerman","Juice ITC","Kabel Bk BT","Kabel Ult BT","Kailasa","KaiTi","Kalinga","Kannada Sangam MN","Kartika","Kaufmann Bd BT","Kaufmann BT","Khmer UI","KodchiangUPC","Kokila","Korinna BT","Kristen ITC","Krungthep","Kunstler Script","Lao UI","Latha","Leelawadee","Letter Gothic","Levenim MT","LilyUPC","Lithograph","Lithograph Light","Long Island","Lydian BT","Magneto","Maiandra GD","Malayalam Sangam MN","Malgun Gothic","Mangal","Marigold","Marion","Marker Felt","Market","Marlett","Matisse ITC","Matura MT Script Capitals","Meiryo","Meiryo UI","Microsoft Himalaya","Microsoft JhengHei","Microsoft New Tai Lue","Microsoft PhagsPa","Microsoft Tai Le","Microsoft Uighur","Microsoft YaHei","Microsoft Yi Baiti","MingLiU","MingLiU_HKSCS","MingLiU_HKSCS-ExtB","MingLiU-ExtB","Minion","Minion Pro","Miriam","Miriam Fixed","Mistral","Modern","Modern No. 20","Mona Lisa Solid ITC TT","Mongolian Baiti","MONO","MoolBoran","Mrs Eaves","MS LineDraw","MS Mincho","MS PMincho","MS Reference Specialty","MS UI Gothic","MT Extra","MUSEO","MV Boli","Nadeem","Narkisim","NEVIS","News Gothic","News GothicMT","NewsGoth BT","Niagara Engraved","Niagara Solid","Noteworthy","NSimSun","Nyala","OCR A Extended","Old Century","Old English Text MT","Onyx","Onyx BT","OPTIMA","Oriya Sangam MN","OSAKA","OzHandicraft BT","Palace Script MT","Papyrus","Parchment","Party LET","Pegasus","Perpetua","Perpetua Titling MT","PetitaBold","Pickwick","Plantagenet Cherokee","Playbill","PMingLiU","PMingLiU-ExtB","Poor Richard","Poster","PosterBodoni BT","PRINCETOWN LET","Pristina","PTBarnum BT","Pythagoras","Raavi","Rage Italic","Ravie","Ribbon131 Bd BT","Rockwell","Rockwell Condensed","Rockwell Extra Bold","Rod","Roman","Sakkal Majalla","Santa Fe LET","Savoye LET","Sceptre","Script","Script MT Bold","SCRIPTINA","Serifa","Serifa BT","Serifa Th BT","ShelleyVolante BT","Sherwood","Shonar Bangla","Showcard Gothic","Shruti","Signboard","SILKSCREEN","SimHei","Simplified Arabic","Simplified Arabic Fixed","SimSun","SimSun-ExtB","Sinhala Sangam MN","Sketch Rockwell","Skia","Small Fonts","Snap ITC","Snell Roundhand","Socket","Souvenir Lt BT","Staccato222 BT","Steamer","Stencil","Storybook","Styllo","Subway","Swis721 BlkEx BT","Swiss911 XCm BT","Sylfaen","Synchro LET","System","Tamil Sangam MN","Technical","Teletype","Telugu Sangam MN","Tempus Sans ITC","Terminal","Thonburi","Traditional Arabic","Trajan","TRAJAN PRO","Tristan","Tubular","Tunga","Tw Cen MT","Tw Cen MT Condensed","Tw Cen MT Condensed Extra Bold","TypoUpright BT","Unicorn","Univers","Univers CE 55 Medium","Univers Condensed","Utsaah","Vagabond","Vani","Vijaya","Viner Hand ITC","VisualUI","Vivaldi","Vladimir Script","Vrinda","Westminster","WHITNEY","Wide Latin","ZapfEllipt BT","ZapfHumnst BT","ZapfHumnst Dm BT","Zapfino","Zurich BlkEx BT","Zurich Ex BT","ZWAdobeF"])}n=(n=n.concat(t.fonts.userDefinedFonts)).filter(function(e,t){return n.indexOf(e)===t});var o=document.getElementsByTagName("body")[0],i=document.createElement("div"),a=document.createElement("div"),s={},u={},c=function(){var e=document.createElement("span");return e.style.position="absolute",e.style.left="-9999px",e.style.fontSize="72px",e.style.fontStyle="normal",e.style.fontWeight="normal",e.style.letterSpacing="normal",e.style.lineBreak="auto",e.style.lineHeight="normal",e.style.textTransform="none",e.style.textAlign="left",e.style.textDecoration="none",e.style.textShadow="none",e.style.whiteSpace="normal",e.style.wordBreak="normal",e.style.wordSpacing="normal",e.innerHTML="mmmmmmmmmmlli",e},l=function(e,t){var r=c();return r.style.fontFamily="'"+e+"',"+t,r},d=function(e){for(var t=!1,n=0;n<r.length;n++)if(t=e[n].offsetWidth!==s[r[n]]||e[n].offsetHeight!==u[r[n]])return t;return t},p=function(){for(var e=[],t=0,n=r.length;t<n;t++){var o=c();o.style.fontFamily=r[t],i.appendChild(o),e.push(o)}return e}();o.appendChild(i);for(var h=0,g=r.length;h<g;h++)s[r[h]]=p[h].offsetWidth,u[r[h]]=p[h].offsetHeight;var f=function(){for(var e={},t=0,o=n.length;t<o;t++){for(var i=[],s=0,u=r.length;s<u;s++){var c=l(n[t],r[s]);a.appendChild(c),i.push(c)}e[n[t]]=i}return e}();o.appendChild(a);for(var y=[],v=0,m=n.length;v<m;v++)d(f[n[v]])&&y.push(n[v]);o.removeChild(a),o.removeChild(i),e(y)},pauseBefore:!0},{key:"fontsFlash",getData:function(e,t){return H()?M()?t.fonts.swfPath?void q(function(t){e(t)},t):e("missing options.fonts.swfPath"):e("flash not installed"):e("swf object not loaded")},pauseBefore:!0},{key:"audio",getData:function(e,t){var r=t.audio;if(r.excludeIOS11&&navigator.userAgent.match(/OS 11.+Version\/11.+Safari/))return e(t.EXCLUDED);var n=window.OfflineAudioContext||window.webkitOfflineAudioContext;if(null==n)return e(t.NOT_AVAILABLE);var o=new n(1,44100,44100),i=o.createOscillator();i.type="triangle",i.frequency.setValueAtTime(1e4,o.currentTime);var a=o.createDynamicsCompressor();u([["threshold",-50],["knee",40],["ratio",12],["reduction",-20],["attack",0],["release",.25]],function(e){void 0!==a[e[0]]&&"function"==typeof a[e[0]].setValueAtTime&&a[e[0]].setValueAtTime(e[1],o.currentTime)}),i.connect(a),a.connect(o.destination),i.start(0),o.startRendering();var s=setTimeout(function(){return console.warn('Audio fingerprint timed out. Please report bug at https://github.com/Valve/fingerprintjs2 with your user agent: "'+navigator.userAgent+'".'),o.oncomplete=function(){},o=null,e("audioTimeout")},r.timeout);o.oncomplete=function(t){var r;try{clearTimeout(s),r=t.renderedBuffer.getChannelData(0).slice(4500,5e3).reduce(function(e,t){return e+Math.abs(t)},0).toString(),i.disconnect(),a.disconnect()}catch(t){return void e(t)}e(r)}}},{key:"enumerateDevices",getData:function(e,t){if(!l())return e(t.NOT_AVAILABLE);navigator.mediaDevices.enumerateDevices().then(function(t){e(t.map(function(e){return"id="+e.deviceId+";gid="+e.groupId+";"+e.kind+";"+e.label}))}).catch(function(t){e(t)})}}],W=function(e){throw new Error("'new Fingerprint()' is deprecated, see https://github.com/Valve/fingerprintjs2#upgrade-guide-from-182-to-200")};return W.get=function(e,t){t?e||(e={}):(t=e,e={}),function(e,t){if(null==t)return e;var r,n;for(n in t)null==(r=t[n])||Object.prototype.hasOwnProperty.call(e,n)||(e[n]=r)}(e,s),e.components=e.extraComponents.concat(U);var r={data:[],addPreprocessedComponent:function(t,n){"function"==typeof e.preprocessor&&(n=e.preprocessor(t,n)),r.data.push({key:t,value:n})}},n=-1,o=function(i){if((n+=1)>=e.components.length)t(r.data);else{var a=e.components[n];if(e.excludes[a.key])o(!1);else{if(!i&&a.pauseBefore)return n-=1,void setTimeout(function(){o(!0)},1);try{a.getData(function(e){r.addPreprocessedComponent(a.key,e),o(!1)},e)}catch(e){r.addPreprocessedComponent(a.key,String(e)),o(!1)}}}};o(!1)},W.getPromise=function(e){return new Promise(function(t,r){W.get(e,t)})},W.getV18=function(e,t){return null==t&&(t=e,e={}),W.get(e,function(r){for(var n=[],o=0;o<r.length;o++){var i=r[o];if(i.value===(e.NOT_AVAILABLE||"not available"))n.push({key:i.key,value:"unknown"});else if("plugins"===i.key)n.push({key:"plugins",value:c(i.value,function(e){var t=c(e[2],function(e){return e.join?e.join("~"):e}).join(",");return[e[0],e[1],t].join("::")})});else if(-1!==["canvas","webgl"].indexOf(i.key)&&Array.isArray(i.value))n.push({key:i.key,value:i.value.join("~")});else if(-1!==["sessionStorage","localStorage","indexedDb","addBehavior","openDatabase"].indexOf(i.key)){if(!i.value)continue;n.push({key:i.key,value:1})}else i.value?n.push(i.value.join?{key:i.key,value:i.value.join(";")}:i):n.push({key:i.key,value:i.value})}var s=a(c(n,function(e){return e.value}).join("~~~"),31);t(s,n)})},W.x64hash128=a,W.VERSION="2.1.2",W})},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.requestValidate=function(e){if("object"!=typeof e||Array.isArray(e))return!1;var t=this.validateUrl(e),r=this.validateEnv(e),n=this.validateRequest(e,"services"),o=this.validateEnvKey(e),i=this.validateNumberofservice(e);return t&&r&&n&&o&&i},e.prototype.validateUrl=function(e){var t=e.url.trim();return!(!e.hasOwnProperty("url")||""===t||"string"!=typeof t)},e.prototype.validateEnv=function(e){return!(!e.hasOwnProperty("envProps")||"object"!=typeof e.envProps||Array.isArray(e.envProps))},e.prototype.validateRequest=function(e,t){return!e.reqData||!e.reqData.hasOwnProperty(t)||"object"==typeof e.reqData[t]&&!Array.isArray(e.reqData[t])},e.prototype.validateEnvKey=function(e){return!!(e.envProps&&e.envProps.hasOwnProperty("envProps")&&e.envProps.envProps.hasOwnProperty("orgId")&&e.envProps.envProps.hasOwnProperty("appId")&&e.envProps.envProps.hasOwnProperty("secureKey")&&e.envProps.envProps.hasOwnProperty("appVersion"))&&("string"==typeof e.envProps.envProps.orgId&&"string"==typeof e.envProps.envProps.appId&&"string"==typeof e.envProps.envProps.appVersion&&!!(e.envProps.envProps.orgId&&e.envProps.envProps.appId&&e.envProps.envProps.appVersion))},e.prototype.validateNumberofservice=function(e){try{return!(Object.keys(e.reqData.services).length>5)}catch(e){}},e}();t.PrepareDataValidation=n},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(10),s=r(1),u=r(11),c=r(3),l=r(2),d=r(12),p=r(7),h=r(8),g=function(){function e(){this.security=new i.Security,this.platwareHeaderandBody=new a.PlatwareRequestModel,this.requestUtility=new s.RequestUtility,this.dateParsing=new u.DateParsing,this.validator=new h.Validators}return e.prototype.getRequestService=function(e){return n(this,void 0,void 0,function(){var t;return o(this,function(r){switch(r.label){case 0:return[4,this.requestUtility.fingerprint()];case 1:return t=r.sent(),this.requestProperty=new d.RequestProprty(e,t),this.setBodyInterfaceKeys(e),this.setHeaderInterfaceKeys(e),[4,this.setServiceHeaders(this.requestProperty.getCurrentDate,this.requestProperty.getFingerPrint,this.requestProperty.getServiceName,this.requestProperty.getEnvProp)];case 2:return r.sent(),[4,this.setServiceBody(this.requestProperty.getCurrentDate,this.requestProperty.getWindowNavigator,e,this.requestProperty.getFingerPrint,this.requestProperty.getEnvProp)];case 3:return r.sent(),[2,this.getPWRequest()]}})})},e.prototype.setBodyInterfaceKeys=function(e){var t=e.reqData.interfaces;for(var r in t)this.platwareHeaderandBody.pwRequest.PWBody.interfaces[r]=t[r]},e.prototype.setHeaderInterfaceKeys=function(e){var t=e.header;for(var r in t)this.platwareHeaderandBody.pwRequest.PWHeader[r]=t[r]},e.prototype.setServiceHeaders=function(e,t,r,i){return n(this,void 0,void 0,function(){var n,a,s,u,d;return o(this,function(o){switch(o.label){case 0:return n="",[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.JWTTOKEN))];case 1:return a=o.sent(),[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.AUTHJWTTOKEN))];case 2:if(s=o.sent())n=this.security.aesEncryption.getDecryption(JSON.parse(s),l.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey());else if(a)try{n=this.security.aesEncryption.getDecryption(JSON.parse(a),l.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())}catch(e){throw e}return this.platwareHeaderandBody.pwRequest.PWHeader.authorization=n,[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.LOGINID))];case 3:return u=o.sent(),d=u?JSON.parse(u):"--",this.platwareHeaderandBody.pwRequest.PWHeader.requestid=this.requestUtility.getRequestid(d,t,e,i),this.setHeaderKeys(r,t,i,"ER_ER"),[2]}})})},e.prototype.setServiceBody=function(e,t,r,i,a){return n(this,void 0,void 0,function(){var n,s,u;return o(this,function(o){switch(o.label){case 0:return this.setInterface(e,t,i,a),this.platwareHeaderandBody.pwRequest.PWBody.services=r.reqData.services,[4,this.requestUtility.generateTxnKey(e,a)];case 1:return n=o.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.txnkey=n.b,s=this.security.aesEncryption.getEncryption(JSON.stringify(this.platwareHeaderandBody.pwRequest.PWBody),n.t),u={request:s},this.platwareHeaderandBody.pwRequest.temp=u,this.platwareHeaderandBody.pwRequest.PWHeader.hash=this.security.aesEncryption.getHashValue(JSON.stringify(u),n.t).toUpperCase(),this.platwareHeaderandBody.pwRequest.txnkey=n.t.toString(),[2]}})})},e.prototype.setHeaderKeys=function(e,t,r,n){this.platwareHeaderandBody.pwRequest.PWHeader.clientid=this.requestUtility.getClientid(r),this.platwareHeaderandBody.pwRequest.PWHeader.servicename=e,this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=t,this.platwareHeaderandBody.pwRequest.PWHeader["security-version"]="2",this.platwareHeaderandBody.pwRequest.PWHeader.requesttype=n},e.prototype.setInterface=function(e,t,r,n){this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_TIMESTAMP=this.dateParsing.dateFormat("device",e),this.platwareHeaderandBody.pwRequest.PWBody.interfaces.fingerprint=r,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.APPLICATION_VERSION=n.appVersion,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_CLIENT_VERSION="2.5.6",this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MAKE=t.platform,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MODEL=t.vendor?t.vendor:t.appCodeName,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LATITUDE=n.lat,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LONGITUDE=n.lon,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_VERSION=""},e.prototype.getPWRequest=function(){return n(this,void 0,void 0,function(){var e;return o(this,function(t){switch(t.label){case 0:return[4,this.validator.networkValidators.getDeviceId()];case 1:return e=t.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=e,[2,this.platwareHeaderandBody.pwRequest]}})})},e}();t.GatewayService=g},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(10),a=r(0),s=r(11),u=r(1),c=r(12),l=r(3),d=r(22),p=r(8),h=function(){function e(){this.security=new a.Security,this.platwareHeaderandBody=new i.PlatwareRequestModel,this.requestUtility=new u.RequestUtility,this.dateParsing=new s.DateParsing,this.apiType=new d.ApiType,this.validator=new p.Validators}return e.prototype.getAuthRequest=function(e){return n(this,void 0,void 0,function(){var t;return o(this,function(r){switch(r.label){case 0:return[4,this.requestUtility.fingerprint()];case 1:return t=r.sent(),this.requestProperty=new c.RequestProprty(e,t),this.setBodyInterfaceKeys(e),this.setHeaderInterfaceKeys(e),[4,this.setAuthHeaders(this.requestProperty.getNounce,e,this.requestProperty.getServiceName,this.requestProperty.getFingerPrint,this.requestProperty.getCurrentNounce,this.requestProperty.getCurrentDate,this.requestProperty.getEnvProp)];case 2:return r.sent(),[4,this.setAuthBody(this.requestProperty.getFingerPrint,this.requestProperty.getWindowNavigator,e,this.requestProperty.getCurrentDate,this.requestProperty.getEnvProp)];case 3:return r.sent(),[2,this.getPWRequest()]}})})},e.prototype.setBodyInterfaceKeys=function(e){var t=e.reqData.interfaces;for(var r in t)this.platwareHeaderandBody.pwRequest.PWBody.interfaces[r]=t[r]},e.prototype.setHeaderInterfaceKeys=function(e){var t=e.header;for(var r in t)this.platwareHeaderandBody.pwRequest.PWHeader[r]=t[r]},e.prototype.setAuthHeaders=function(e,t,r,i,a,s,u){return n(this,void 0,void 0,function(){var n,c,d,p,h,g,f;return o(this,function(o){switch(o.label){case 0:return n=t.reqData.services[r][0].id?t.reqData.services[r][0].id:"--",c=a.toString()+u.secureKey,d=c.substring(0,32),p=u.orgId+"~"+u.appId+"~"+n+"~"+i+":user:"+a,h=this.security.aesEncryption.getEncryption(p,d),this.platwareHeaderandBody.pwRequest.PWHeader.requestid=this.requestUtility.getRequestid(n,i,s,u),this.platwareHeaderandBody.pwRequest.PWHeader.authorization="Basic "+h,this.platwareHeaderandBody.pwRequest.PWHeader.nounce=e,this.setHeaderKeys(r,i,u,"ER_ER"),[4,l.Storage.getInstance().getItemValue(this.requestUtility.makeKey("forceLogin"))];case 1:return g=o.sent(),"Y"===(f=g||"")&&(this.platwareHeaderandBody.pwRequest.PWHeader.isforcelogin=f),this.platwareHeaderandBody.pwRequest.loginId=n,[2]}})})},e.prototype.setAuthBody=function(e,t,r,i,a){return n(this,void 0,void 0,function(){var n,s,u;return o(this,function(o){switch(o.label){case 0:return this.setInterface(i,t,e,a),this.platwareHeaderandBody.pwRequest.PWBody.services=r.reqData.services,[4,this.requestUtility.generateTxnKey(i,a)];case 1:return n=o.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.txnkey=n.b,s=this.security.aesEncryption.getEncryption(JSON.stringify(this.platwareHeaderandBody.pwRequest.PWBody),n.t),u={request:s},this.platwareHeaderandBody.pwRequest.temp=u,this.platwareHeaderandBody.pwRequest.PWHeader.hash=this.security.aesEncryption.getHashValue(JSON.stringify(u),n.t).toUpperCase(),this.platwareHeaderandBody.pwRequest.txnkey=n.t.toString(),[2]}})})},e.prototype.setHeaderKeys=function(e,t,r,i){return n(this,void 0,void 0,function(){return o(this,function(n){return this.platwareHeaderandBody.pwRequest.PWHeader.clientid=this.requestUtility.getClientid(r),this.platwareHeaderandBody.pwRequest.PWHeader.servicename=e,this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=t,this.platwareHeaderandBody.pwRequest.PWHeader["security-version"]="2",this.platwareHeaderandBody.pwRequest.PWHeader.requesttype=i,[2]})})},e.prototype.setInterface=function(e,t,r,n){this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_TIMESTAMP=this.dateParsing.dateFormat("device",e),this.platwareHeaderandBody.pwRequest.PWBody.interfaces.fingerprint=r,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.APPLICATION_VERSION=n.appVersion,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_CLIENT_VERSION="2.5.6",this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MAKE=t.platform,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MODEL=t.vendor?t.vendor:t.appCodeName,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LATITUDE=n.lat,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LONGITUDE=n.lon,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_VERSION=""},e.prototype.getPWRequest=function(){return n(this,void 0,void 0,function(){var e;return o(this,function(t){switch(t.label){case 0:return[4,this.validator.networkValidators.getDeviceId()];case 1:return e=t.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=e,[2,this.platwareHeaderandBody.pwRequest]}})})},e}();t.AuthService=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),o=function(){function e(){this.data={envProps:{},body:{},header:{},reqData:{interfaces:{},services:{}},url:""}}return e.prototype.setapiType=function(e){this.apiType=e},e.prototype.getapiType=function(){return this.apiType},e.prototype.mapToPlatwareRequest=function(e,t){return this.data.envProps=n.EnvironmentStore.getInstance().getEnvironment(),this.data.header=t,this.data.body=e,this.setServiceKeys(),this.setDataUrl(),this.data},e.prototype.setDataUrl=function(){this.data.envProps.hasOwnProperty("isAuth")?this.data.url=this.setAuthUrl(this.data.body):this.data.url=this.setUrl(this.data.body)},e.prototype.setServiceKeys=function(){for(var e in this.data.body)this.data.reqData.services[e]=this.data.body[e]},e.prototype.setUrl=function(e){for(var t in e)return"LOGOUT"===t?(this.data.url=this.getUrl("logout"),this.data.url):"AUTH_VAHANA"===t||"AUTH"===t||"VAHANA_AUTHENTICATION"===t?(this.data.url=this.getUrl("auth"),this.setapiType(t),this.data.url):(this.data.url=this.getUrl(""),this.data.url)},e.prototype.getUrl=function(e){switch(e){case"auth":return"/register";case"logout":return"/logout";default:return"/gateway"}},e.prototype.setAuthUrl=function(e){for(var t in e)return this.data.url=this.getUrl("auth"),this.setapiType(t),this.data.url},e}();t.PrepareRequest=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),o=function(){function e(){}return e.prototype.mapToPlatwareRequestEndPoint=function(e,t,r){var o={envProps:{},body:{},header:{},reqData:{interfaces:{},requestData:{}},url:""};return o.envProps=n.EnvironmentStore.getInstance().getEnvironment(),o.header=t,o.body=e,o.reqData.requestData=e,o.url=r,o},e}();t.PrepareRequestForEndPoint=o},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(10),s=r(1),u=r(11),c=r(3),l=r(2),d=r(12),p=r(7),h=r(8),g=function(){function e(){this.security=new i.Security,this.platwareHeaderandBody=new a.PlatwareRequestModel,this.requestUtility=new s.RequestUtility,this.dateParsing=new u.DateParsing,this.validator=new h.Validators}return e.prototype.getRequestService=function(e){return n(this,void 0,void 0,function(){var t;return o(this,function(r){switch(r.label){case 0:return[4,this.requestUtility.fingerprint()];case 1:return t=r.sent(),this.requestProperty=new d.RequestProprty(e,t),this.setBodyInterfaceKeys(e),this.setHeaderInterfaceKeys(e),[4,this.setServiceHeaders(e,this.requestProperty.getCurrentDate,this.requestProperty.getFingerPrint,this.requestProperty.getServiceName,this.requestProperty.getEnvProp)];case 2:return r.sent(),[4,this.setServiceBody(this.requestProperty.getCurrentDate,this.requestProperty.getWindowNavigator,e,this.requestProperty.getFingerPrint,this.requestProperty.getEnvProp)];case 3:return r.sent(),[2,this.getPWRequest()]}})})},e.prototype.setBodyInterfaceKeys=function(e){var t=e.reqData.interfaces;for(var r in t)this.platwareHeaderandBody.pwRequest.PWBody.interfaces[r]=t[r]},e.prototype.setHeaderInterfaceKeys=function(e){var t=e.header;for(var r in t)this.platwareHeaderandBody.pwRequest.PWHeader[r]=t[r]},e.prototype.setServiceHeaders=function(e,t,r,i,a){return n(this,void 0,void 0,function(){var n,s,u,d,h;return o(this,function(o){switch(o.label){case 0:return n="",[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.JWTTOKEN))];case 1:return s=o.sent(),[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.AUTHJWTTOKEN))];case 2:if(u=o.sent())n=this.security.aesEncryption.getDecryption(JSON.parse(u),l.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey());else if(s)try{n=this.security.aesEncryption.getDecryption(JSON.parse(s),l.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())}catch(e){throw e}return this.platwareHeaderandBody.pwRequest.PWHeader.authorization=n,[4,c.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.LOGINID))];case 3:return d=o.sent(),h=d?JSON.parse(d):"--",this.platwareHeaderandBody.pwRequest.PWHeader.requestid=this.requestUtility.getRequestid(h,r,t,a),this.setHeaderKeys(e,i,r,a,"ER_ER"),[2]}})})},e.prototype.setServiceBody=function(e,t,r,i,a){return n(this,void 0,void 0,function(){var n,s,u,c,l,d,p,h,g;return o(this,function(o){switch(o.label){case 0:return this.setInterface(e,t,i,a),[4,this.requestUtility.generateTxnKey(e,a)];case 1:if(n=o.sent(),delete this.platwareHeaderandBody.pwRequest.PWBody.services,r.reqData.requestData instanceof FormData){for(s=new FormData,u=0,c=Array.from(r.reqData.requestData.entries());u<c.length;u++)l=c[u],s.append(l[0],l[1]);r.reqData.requestData=s,r.reqData.requestData.append("interfaces",JSON.stringify(this.platwareHeaderandBody.pwRequest.PWBody.interfaces)),d=JSON.stringify(r.reqData.requestData),p=this.security.aesEncryption.getEncryption(d,n.t),g={request:p},r.reqData.requestData.append("request",JSON.stringify(g)),this.platwareHeaderandBody.pwRequest.PWHeader.hash=this.security.aesEncryption.getHashValue(JSON.stringify(g),n.t).toUpperCase(),this.platwareHeaderandBody.pwRequest.temp=r.reqData.requestData}else this.platwareHeaderandBody.pwRequest.PWBody.requestData=r.reqData.requestData,h=this.security.aesEncryption.getEncryption(JSON.stringify(this.platwareHeaderandBody.pwRequest.PWBody),n.t),g={request:h},this.platwareHeaderandBody.pwRequest.temp=g,this.platwareHeaderandBody.pwRequest.PWHeader.hash=this.security.aesEncryption.getHashValue(JSON.stringify(g),n.t).toUpperCase();return this.platwareHeaderandBody.pwRequest.txnkey=n.t.toString(),this.platwareHeaderandBody.pwRequest.PWHeader.txnkey=n.b,[2]}})})},e.prototype.setHeaderKeys=function(e,t,r,n,o){this.platwareHeaderandBody.pwRequest.PWHeader.clientid=this.requestUtility.getClientid(n),this.platwareHeaderandBody.pwRequest.PWHeader.servicename=t||e.header.apiname,this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=r,this.platwareHeaderandBody.pwRequest.PWHeader["security-version"]="2",this.platwareHeaderandBody.pwRequest.PWHeader.requesttype=o},e.prototype.setInterface=function(e,t,r,n){this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_TIMESTAMP=this.dateParsing.dateFormat("device",e),this.platwareHeaderandBody.pwRequest.PWBody.interfaces.fingerprint=r,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.APPLICATION_VERSION=n.appVersion,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_CLIENT_VERSION="2.5.6",this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MAKE=t.platform,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_MODEL=t.vendor?t.vendor:t.appCodeName,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LATITUDE=n.lat,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.DEVICE_LONGITUDE=n.lon,this.platwareHeaderandBody.pwRequest.PWBody.interfaces.PW_VERSION=""},e.prototype.getPWRequest=function(){return n(this,void 0,void 0,function(){var e;return o(this,function(t){switch(t.label){case 0:return[4,this.validator.networkValidators.getDeviceId()];case 1:return e=t.sent(),this.platwareHeaderandBody.pwRequest.PWHeader.deviceid=e,[2,this.platwareHeaderandBody.pwRequest]}})})},e}();t.EndPointService=g},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(2),s=r(1),u=r(3),c=r(9),l=r(6),d=r(13),p=r(5),h=r(7),g=function(){function e(){this.security=new i.Security,this.requestUtility=new s.RequestUtility,this.serviceController=new d.ServiceController}return e.prototype.readResponse=function(e,t,r,i,s){return n(this,void 0,void 0,function(){var e,n,u,c;return o(this,function(o){switch(o.label){case 0:"function"==typeof t.get?this.authKey=t.get("Authorization"):this.authKey=t.authKey,o.label=1;case 1:return o.trys.push([1,4,,5]),u=(n=JSON).parse,[4,this.security.aesEncryption.getDecryption(i.body.response,s)];case 2:return e=u.apply(n,[o.sent()]),[4,this.requestUtility.userCredentials(r,this.authKey,a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())];case 3:return o.sent(),c=Object.keys(e.services)[0],[2,p.UserResponse.mapAPIResponse(!0,e.services[c].records[0].data[0].auth)];case 4:return o.sent(),[3,5];case 5:return[2]}})})},e.prototype.authErrorHandle=function(e,t,r,i){return n(this,void 0,void 0,function(){var n,a,s,d,g,f;return o(this,function(o){switch(o.label){case 0:if("Login Failed"===e)throw p.UserResponse.mapAPIResponse(!1,t,"PW-0003");return[4,u.Storage.getInstance().getItemValue(this.requestUtility.makeKey(h.StorageConstant.REGISTERATIONFAIL))];case 1:return null!==o.sent()?[3,2]:(a=!1,[3,4]);case 2:return[4,u.Storage.getInstance().getItemValue(this.requestUtility.makeKey(h.StorageConstant.REGISTERATIONFAIL))];case 3:a=o.sent(),o.label=4;case 4:if(n=a,"LOGOUT"!==e||"625"!==t.status)return[3,5];try{throw this.requestUtility.clearCreds(),p.UserResponse.mapAPIResponse(!0,t,"PW-0002")}catch(e){throw g=c.ErrorHandler.getErrors(l.ErrorConstant.PARSINGRESPONSE),p.UserResponse.mapAPIResponse(!1,g,g.code)}return[3,18];case 5:return"REGISTERAPP"===e&&"401"===t.status||"627"===t.status||"537"===t.status?n?[3,9]:(this.requestUtility.clearCredsAll(),u.Storage.getInstance().setItem(this.requestUtility.makeKey(h.StorageConstant.REGISTERATIONFAIL),!0),i?[4,this.serviceController.doAuthDirect(r)]:[3,7]):[3,11];case 6:return[2,o.sent()];case 7:return[4,this.serviceController.doAuth(r)];case 8:return[2,o.sent()];case 9:throw this.requestUtility.clearCredsAll(),s=c.ErrorHandler.getErrors(l.ErrorConstant.REGISTRATIONFAILED),p.UserResponse.mapAPIResponse(!1,s,s.code);case 10:return[3,18];case 11:return"621"!==t.status?[3,17]:confirm("You are already logged in. Do you want to kill existing session?")?(!!r.hasOwnProperty("header")?r.header.isforcelogin="Y":(r.header={},r.header.isforcelogin="Y"),i?[4,this.serviceController.doAuthDirect(r)]:[3,13]):[3,15];case 12:return[2,o.sent()];case 13:return[4,this.serviceController.doAuth(r)];case 14:return[2,o.sent()];case 15:throw d=c.ErrorHandler.getErrors(l.ErrorConstant.DUPLICATESESSION),p.UserResponse.mapAPIResponse(!1,d,d.code);case 16:return[3,18];case 17:if("402"===t.status||"622"===t.status||"628"===t.status||"528"===t.status){this.requestUtility.clearCreds();try{throw p.UserResponse.mapAPIResponse(!1,t,"PW-0002")}catch(e){throw c.ErrorHandler.getErrors(l.ErrorConstant.PARSINGRESPONSE)}}else if("Login Failed"===e||0!==t.status)try{throw p.UserResponse.mapAPIResponse(!1,t,"PW-0003")}catch(e){throw g=c.ErrorHandler.getErrors(l.ErrorConstant.PARSINGRESPONSE),p.UserResponse.mapAPIResponse(!1,g,g.code)}else try{throw p.UserResponse.mapAPIResponse(!1,t,t.status)}catch(e){throw f=c.ErrorHandler.getErrors(l.ErrorConstant.UNKNOWN),p.UserResponse.mapAPIResponse(!1,f,f.code)}o.label=18;case 18:return[2]}})})},e}();t.AuthResponseHandler=g},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))(function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r(function(e){e(t)})).then(a,s)}u((n=n.apply(e,t||[])).next())})},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(0),a=r(2),s=r(1),u=r(3),c=r(9),l=r(6),d=r(5),p=r(7),h=function(){function e(){this.security=new i.Security,this.requestUtility=new s.RequestUtility}return e.prototype.readResponse=function(e,t){return n(this,void 0,void 0,function(){return o(this,function(r){switch(r.label){case 0:return"function"==typeof t.get?this.authKey=t.get("Authorization"):this.authKey=t.authKey,this.jwtToken=this.getJwtToken(this.authKey),this.rsaJson=this.getRsaData(e),[4,this.requestUtility.authCredentials(this.rsaJson,a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey(),this.jwtToken)];case 1:return[2,r.sent()]}})})},e.prototype.getJwtToken=function(e){return this.security.aesEncryption.getEncryption(e,a.EnvironmentStore.getInstance().getEnvironment().getEnvProps().getSecureKey())},e.prototype.getRsaData=function(e){return JSON.parse(e.services.REGISTERAPP.records[0].data[0].rsa)},e.prototype.registrationErrorHandle=function(e,t,r){return n(this,void 0,void 0,function(){var n,i,a,s,h;return o(this,function(o){switch(o.label){case 0:return[4,u.Storage.getInstance().getItemValue(this.requestUtility.makeKey(p.StorageConstant.REGISTERATIONFAIL))];case 1:return n=o.sent(),i=n||!1,"REGISTERAPP"===e&&"401"===t.status||"627"===t.status||"537"===t.status?i?[3,3]:(this.requestUtility.clearCredsAll(),u.Storage.getInstance().setItem(this.requestUtility.makeKey(p.StorageConstant.REGISTERATIONFAIL),!0),[4,this.serviceController.doRegister(r)]):[3,5];case 2:return[2,o.sent()];case 3:throw this.requestUtility.clearCredsAll(),u.Storage.getInstance().clear(this.requestUtility.makeKey(p.StorageConstant.REGISTERATIONFAIL)),a=c.ErrorHandler.getErrors(l.ErrorConstant.REGISTRATIONFAILED),d.UserResponse.mapAPIResponse(!1,a,a.code);case 4:return[3,6];case 5:if(0===t.status)throw h=c.ErrorHandler.getErrors(l.ErrorConstant.UNKNOWN),d.UserResponse.mapAPIResponse(!1,h,h.code);try{throw d.UserResponse.mapAPIResponse(!1,t,"PW-0003")}catch(e){throw"500"===e.servercode?e:(s=c.ErrorHandler.getErrors(l.ErrorConstant.PARSINGRESPONSE),d.UserResponse.mapAPIResponse(!1,s,s.code))}o.label=6;case 6:return[2]}})})},e}();t.RegistrationResponseHandler=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.controllerConst={DMS:{basePoint:"/DMS/execution",uploadStartPoint:"/upload-gateway",fetchForDocument:"/fetch/document",fetchForFolder:"/fetch/folder",upload:"/upload",downloadUrl:"/download/file",deleteFile:"/delete",deleteFileId:"/delete/file",fetchByStorageId:"/dmsconfig/admin/get/dmsClientDetails",uploadMetaData:"/update/metadata",updateFileMetaData:"/update/files/metadata",updateDocument:"/update/document",docAndFile:"/fetch/byrefId",fetchByFileId:"/fetch/file",listingData:"/fetch/path",document:"document",file:"file",FILE:"FILE",DOCUMENT:"DOCUMENT"}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.prototype.filterResponse=function(e){var t=this;return new Promise(function(r,n){"object"==typeof e.data?t.responseHandler(e,t.getServiceName(e.data),r,n):!0===e.status?r(e):n(e)})},e.prototype.getServiceName=function(e){if(e)return delete e.status,Object.keys(e)},e.prototype.responseHandler=function(e,t,r,n){e.status?this.dataHandler(e.data,t,r,n):n(e)},e.prototype.dataHandler=function(e,t,r,n){r(e)},e}();t.FilterResponse=n}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,